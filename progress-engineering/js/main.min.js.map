{"version":3,"sources":["main.js"],"names":["fadeOut","element","duration","opacity","delta","timer","setInterval","style","clearInterval","display","banText","event","parseFloat","key","preventDefault","parent","parentElement","classList","text","value","div","document","width","createElement","textContent","clientWidth","el","remove","preventDefaultFunc","e","useGrouping","num","replace","toLocaleString","getCoords","getBoundingClientRect","body","docEl","documentElement","scrollTop","pageYOffset","scrollLeft","window","pageXOffset","clientTop","clientLeft","top","left","box","getParams","searchParams","forEach","params","val","undefined","Array","push","getCurrentTime","minutes","now","Date","hours","getHours","getMinutes","button","JSON","querySelector","its_el_is_open","toggle","btn","addEventListener","target","itsEl","contains","its_btn","cl","constructor","initCustomSelect","this","select","options","selectElement","show","nodeName","icon","querySelectorAll","method","replaceCustomWithDefault","defaultSelect","createDefaultSelect","customSelectEvents","customSelect","createCustomSelect","replaceSelectWithCustom","selectTitle","createCustomSelectTitle","selectContent","createCustomSelectContent","selectClasses","className","add","append","selectedOption","from","find","option","selected","selectTitleText","selectTitleIcon","innerHTML","selectContentWrap","createCustomSelectOptions","isMobile","overlay","optionAttributes","attribute","index","input","checked","setAttribute","label","span","name","map","trim","appendChild","labelHeight","replaceWith","titleText","labelText","labels","content","labelCount","length","offsetHeight","inputValue","maxHeight","title","item","clickOutsideSelect","its_overlay","selectName","inputAttributes","createDefaultOptions","required","attributes","elCheck","isRequired","l","formPhoneValid","validPhone","formEmailValid","emailVal","split","emailValid","match","formAddressValid","formCustomSelectValid","closest","inputs","i","messages","formPromocodeValid","getAttribute","multiple","selector","bindEvents","headings","heading","closeOthers","close","open","allElements","currentElement","desktop","main","values","headerHeight","footerHeight","minHeight","calculateDynamicValue","laptop","tablet","mobile","header","targetElement","footer","targetOffsetTop","targetId","links","offsetTop","behavior","validationFunctions","formNameValid","link","phone","smoothScroll","HandlerForm","form","excludeFields","checkboxFields","email","formIndexValid","fields","init","textarea","formTextareaValid","reset","submit","formFields","submitHandler","addFieldIfExist","fieldAddHandle","onclick","selects","validateFields","validationResult","props","listener","validate","handler","includes","result","isMessage","field","Function","messageLength","isSelect","isCustom","reqiured","fieldCheckValidation","fieldName","validation","validationErrors","stringify","FormSender","checkValues","formSubmit","getFieldsValues","fieldsValues","FormHandler","modal","isOverlay","isCloseButton","hamburger","dataset","wrapper","getElementById","modalId","hamburgerClose","menuListWidth","menuOffsetTop","menu","container","stickyMenu","containerWidth","scrollWidth","backToTop","showHideIcon","cartBtn","finalWidth","getMenuOffsetTop","headerH","scrollMenu","catalogLinks","menuH","height","itemLink","action","innerHeight","slug","urlGetParams","ajax","scrollTo","navMenuItems","history","replaceState","cart","myAccordion","location","Accordion","href","catName","$","url","americano","ajaxurl","type","data","beforeSend","xhr","success","complete","handleClick","inputsPhone","mainAboutSlider","inputsEmail","projectsSlider","children","IMask","baseSliderInit","slidesToShow","policyLinks","customSelects","CustomSelect","geographyTabs","geographyTabsContent","tab","currentTab","dataTab","contentTab","dataContentTab","slider","sliderNavi","slick","slidesToScroll","speed","draggable","appendDots","appendArrows","arrows","infinite","swipe","dots","dotsClass"],"mappings":"AACA,SAASA,QAAQC,EAASC,GAEtB,IAAIC,EAAW,EAEXC,EAAS,GAAIF,EAAa,IAG1BG,EAAQC,aAAY,WAEpBH,GAAWC,EAEXH,EAAQM,MAAMJ,QAAUA,EAGpBA,GAAc,IACdK,cAAoBH,GACpBJ,EAAcQ,MAAAA,QAAgB,UAEjC,IAOT,SAASC,QAAQC,GACb,IAAID,EAAUE,WAAWD,EAAME,KAG3BF,MAAMG,IACVH,EAAAG,iBAOJ,SACQC,YAAYC,GAChB,IAIIC,EAJAC,EAAUC,EAAAA,cACVC,EAAMC,EAAAA,MACNC,EAAKD,SAAAE,cAAA,OAITR,EAAME,UAAQG,IAAI,YAElBE,EAAKE,YAAOC,EACVV,EAAOO,OAAKF,GAElBE,EAAAF,EAAAK,YAFIC,EAAGnB,MAAMe,MAAQA,EAAQ,KAI7BF,EAAAO,SAIA,SAASC,mBAAmBC,GAI5BA,EAAAf,iBAKA,SAEwCgB,YAAaC,GACrD,OAD2DA,EAACC,WAAcD,IAC1EE,eAAA,QAAA,CAAAH,aAAA,IAAAE,QAAA,KAAA,KAOA,SACWE,UAAQC,GACf,IAAIC,EAAOf,EAAAA,wBACPgB,EAAQhB,SAASiB,KACjBC,EAASlB,SAAUmB,gBACnBC,EAAaC,OAAOC,aAAeN,EAAMI,WAAcL,EAAKK,UAC5DG,EAAYP,OAAMO,aAAkBA,EAAAA,YAAcR,EAAAK,WAClDI,EAAaR,EAAMQ,WAAcT,EAAKS,WAAU,EAChDC,EAAaT,EAAGE,YAAYK,EAASC,YAAA,EAKrCE,MAAMA,CACTD,IALUE,EAAID,IAAON,EAAUG,EAMpCG,KAJWC,EAAAD,KAAAN,EAAAI,GAWX,SAGWI,UAAMC,EAAAA,OAAaC,UACtB,IAAIC,EAAOvC,GAcnB,OAfI,IAGYuC,IAAAA,GAAOvC,aAAeA,SAAK,SAAAwC,EAAAxC,QAC/ByC,IAAAF,EAAAvC,IACW0C,MAAMF,QAAID,EAAAvC,MAClBuC,EAAAvC,GAAA,CAAAuC,EAAAvC,KAEPuC,EAAAvC,GAAA2C,KAAAH,IAGGD,EAAMvC,GAAAwC,KAIjBD,EAGA,SAKSK,iBACLC,MAAOC,EAAGD,IAAOE,KAEjB,IAAAC,EAAYF,EAAMG,WACtBJ,EAAAC,EAAAI,aAMA,OAHAF,EAAAA,EAAA,GAAA,IAAAA,EAAAA,EACAH,EAAAA,EAAA,GAAA,IAAAA,EAAAA,EAEAG,EAAA,IAAAH,EAEA,SAOQzD,cAAUoB,GACV2C,MAA+B,OAAzBC,KAAG5C,UAAS6C,GAF1B,SAQYC,aAAczC,EAAGzB,EAAAA,GAErB,IAAIA,EAAUoB,SAAQ6C,cAAIC,GACtBlE,EAAQgB,SAAUmD,cAAUC,GAElChD,SAAAiD,iBAAA,QAAAzC,IACN,IAAA0C,EAAA1C,EAAA0C,OACAC,EAAAD,GAAAtE,GAAAA,EAAAwE,SAAAF,GARYG,EAAUH,GAAUP,EAUhCG,EAAAlE,EAAAgB,UAAAwD,SAAAE,GAEAH,GAAAE,IAAAP,GARYlE,EAAQgB,UAAUmD,OAAOO,KAUrC,MASIC,aAAAA,YASaC,EAAAA,GAELC,KAAAC,OAAAC,EAAAC,cACAH,KAAII,KAAKH,EAAOI,MAAa,EACzBL,KAAAM,KAAAJ,EAAAI,MAAA,KACAN,KAAKE,SAAU3D,SAAK0D,gBAAOM,YAAiB,OAG5C,SAAAC,EACIR,KAACS,iBAAAA,KAA0BR,QAGN,QAArBO,KAAMP,OAAKI,WAEfL,KAAAE,QAAAF,KAAAC,OAAAM,iBAAA,uBAERP,KAAAU,cAAAV,KAAAW,sBAPQX,KAAKS,2BAYrB,WAAAD,GACAR,KAAAD,iBAAAC,KAAAU,gBAUQX,iBAAKa,GAPLZ,KAAKE,QAAUD,EAAOM,iBAAiB,UAU3CP,KAAAC,OAAAA,EAEJ,MAAAY,EAAAb,KAAAc,mBAAAb,GAEAD,KAAAe,wBAAAF,GAEQb,KAAAY,mBAAAC,GADJC,mBAAmBb,GAWXe,IAAAA,EAAmBC,MAAAA,KAAAA,EAAAA,WACnBC,EAAgB3E,SAAK4E,cAAAA,OARzBC,EAAc/C,QAAQgD,GAAaR,EAAa1E,UAAUmF,IAAID,IAU9DR,EAAA1E,UAAAmF,IAAA,iBACAT,EAAaU,UACbV,EAAoBK,UAAAA,IAAc,YAKtC,IAAAF,EAAAhB,KAAAiB,wBAAAJ,GACJK,EAAAlB,KAAAmB,0BAAAN,GAJQ,OAOJI,EAAAA,OAAwBJ,GACpBA,EAAAU,OAAAL,GAROL,EAOXI,wBAAwBJ,GAYhB,IAPAW,EAOkB/C,MAAEgD,KAAAzB,KAAAE,SAPUwB,KAAKC,GAAUA,EAAOC,UAYxDZ,EAAsBM,SAAI7E,cAAiB,OAC3CoF,EAA0BP,SAAI7E,cAAA,OAC9BqF,EAA0BR,SAAI7E,cAAA,OAa9B,OAVgBsF,OAAhBD,KAAAA,OATI9B,KAAKM,KAAO,6eAIhBU,EAAY7E,UAAUmF,IAAI,gBAWtBE,EAAenF,UAAUiF,IAAI,sBAC7BT,EAAa1E,UAAcmF,IAAA,sBAG/BO,EAAoBnF,YAAA8E,EAAA9E,YACxBoF,EAAAC,UAAA/B,KAAAM,KAIJU,EAAAO,OAAAM,GACAb,EAAAO,OAAAO,GAEgC,KAA5BX,EAAyBA,OACrBN,EAAA1E,UAAAmF,IAAA,UATON,EAqBPG,4BAGJ,IAAAD,EAAA3E,SAAAE,cAAA,OAbIyE,EAAc/E,UAAUmF,IAAI,kBAiBpC,IAAAU,EAAAhC,KAAAiC,4BAGQ,GAFRf,EAAAK,OAAAS,GAEQhC,KAAAkC,SAAA,CACIF,IAAAA,EAAiBzF,SAAGA,cAASE,OACjCuF,EAAAA,UAAkB7F,IAAUmF,0BAbxBJ,EAAcK,OAAOY,GAiBrB,OAAAjB,EAPRe,4BAEI,IAAID,EAAoBzF,SAASE,cAAc,OA0DnDmE,OA3CQoB,EAAA7F,UAAAmF,IAAA,uBAGAc,KAAAA,QAAAA,QAAqBC,CAAAA,EAASC,KAGtBC,MAAMC,EAAUjG,SAAIE,cAAA,SACjB8F,EAAAhG,SAAAE,cAAA,SACGgG,EAAAA,SAAaJ,cAAgBA,QAInCK,EAAMvG,UAAUmF,IAAI,2BACxBqB,EAAAxG,UAAAmF,IAAA,yBAG2B,IAACrB,EAAO2C,YAEvCC,IAAAR,IAC0B3F,aAArBA,EAAciF,MAdXY,EAAME,aAAa,UAAW,WAgBtCF,EAAAC,SAAA,GAEaG,EAAKF,aAAAJ,EAAAO,KAAAP,EAAAhG,OAIE,aAAjB2F,EAAiBY,MAC5BF,EAAAvG,UAAAmF,IAAA,cAGJiB,EAAAE,aAAA,OAAA,SACAF,EAAAE,aAAA,OAAAzC,KAAAC,OAAA2C,MAGQD,EAAAjG,YAAAiF,EAAAjF,YAAAoG,OAbIJ,EAAMnB,OAAOgB,GAiBrBG,EAAAnB,OAAAoB,GACJX,EAAAe,YAAAL,KAGI9B,EAOIG,wBAAqBR,GAEjByC,KAAAA,OAAWC,YAAIhD,GATvBW,mBAAmBX,GAkBXyC,IAAMlD,EAAAA,EAAAA,cAA0B,iBAC5B0D,EAAAjD,EAAAb,cAAA,uBACI+D,EAASlD,EAAQb,cAAc,mBAbvCgE,EAASC,EAAQ9C,iBAAiB,4BAiB9B+C,EAAAF,EAAAG,OACAhB,EAAgB,EAGhBa,EAAA/E,QAAA,CAAAqE,EAAAJ,KACOnG,GAAUU,KAAAA,OAETmG,GAAWN,EAAAc,cAInBd,EAAAlD,iBAAA,QAAA,KAEU,IAACrD,EAAcuG,EAAAtD,cAAS,0BAAA1C,YAClC6F,EAAAG,EAAAtD,cAAA,SAEIqE,EAAmBlB,EAAAlG,MAGbF,EAAAA,SAAgB,EAE5B+G,EAAAxG,YAAAyG,EAhBElD,EAAO9D,UAAUU,OAAO,QAoBhCmD,KAAAkC,WACc3F,SAAS6D,KAAMjE,UAAAU,OAAA,aACjBV,SAAciD,cAAY,QAAAjD,UAAAU,OAAA,aAGtCoD,EAAA9D,UAAAwD,SAAA,WACc+D,EAASvH,UAAG6G,IAAW,UAGP,KAAxBxD,EACFS,EAAA9D,UAAAU,OAAA,UAEY8G,EAAK1D,UAAQpD,OAAA,gBAOvByG,GAAAtD,KAAAI,MAjBFiD,EAAQlH,UAAUmF,IAAI,aAsBlB/E,EAAQd,MAAMU,UAAUmD,EAAO,GAAY,KAGjDqE,EAAAnE,iBAAA,QAAA,KAEFjD,SAAAgE,iBAAA,WAAAlC,QAAAuF,IACKC,IAAmB5D,IAC5B2D,EAAAzH,UAAAU,OAAA,QAjBoBmD,KAAKkC,WAmBzB3F,SAAAe,KAAAnB,UAAAU,OAAA,aACJN,SAAA6C,cAAA,QAAAjD,UAAAU,OAAA,gBAMgB4C,EAAS1C,UAAQuC,OAAA,QACZU,KAAGP,WACRG,SAAUH,KAAUkE,UAAKrE,OAAA,aACzBwE,SAAcrE,cAAOtD,QAAUwD,UAASL,OAAA,eAKxCW,KAAAA,mBAAwBA,EAAO0D,GAV3CE,mBAmB6B5D,EAAC9D,GAlB1BI,SAmBYA,iBAAuB,QAAQJ,IACnC,IAAAsD,EAAA1C,EAAA0C,OACJC,EAAAD,GAAAQ,GAAAA,EAAAN,SAAAF,GACFG,EAAAH,GAAAkE,EACNG,EAAArE,EAAAtD,UAAAwD,SAAA,0BAlBYN,EAAiBY,EAAO9D,UAAUwD,SAAS,QAsB3DD,GAAAE,IAAAP,IACIoB,EAAAA,UAA2BnB,OAAA,QACX2D,KAAAA,UAChB1G,SAAAe,KAAAnB,UAAAmD,OAAA,cAIJwE,GAAAzE,IACAY,EAAA9D,UAAAU,OAAA,QACI8D,KAAsBuB,WAClB3F,SAAAe,KAAAnB,UAAAU,OAAA,aACMgE,SAAmBzB,cAAO,QAAAjD,UAAAU,OAAA,gBAShC4D,2BACAW,KAAAA,OAAc/C,YAAQgD,KAASX,eAO/BA,sBAEA,MAAAG,EAAAb,KAAAC,OACI,IAACC,EAAgBqC,MAASd,KAAAZ,EAAA1E,WAIvBuE,EAAanE,SAAAE,cAAA,UAGxBsH,EAAA/D,KAAAE,QAAA,GAAA0C,KAiBIoB,OAdR5C,EAAA/C,QAAAgD,GAAAX,EAAAvE,UAAAmF,IAAAD,IACAX,EAAAvE,UAAAU,OAAA,SAAA,gBAAA,YACIoH,EAAqB1B,UAAO5C,SAAA,cACxBe,EAAAwD,UAAA,GAIAxD,EAAAkC,KAAAmB,EAGA/D,KAAAE,QAAA7B,QAAAkE,IACI7F,EAAc6F,OAAMrG,KAAAA,qBAA4BqG,MAGpDyB,EAZJC,qBAqBmBxB,GAGb,MAAAuB,EAAA,IAAAzB,EAAA4B,YAlBF,IAAIxC,EAASpF,SAASE,cAAc,UA0B7BkF,EAAMY,EAAArG,cAAAkD,cAAA,0BAAA1C,YAAAoG,OAwBP,OArBdkB,EAAA3F,QAAAgE,IACA,IAAAO,EAAAP,EAAAO,KAGA,SAAAA,GAAA,SAAAA,GAAA,YAAAA,GACAjB,EAAAc,aAAAG,EAAAP,EAAAhG,OAGI,YAAAuG,IACWvG,EAAMkH,aAAM,WAAA,YACT5B,EAAIC,UAAA,KAKOnD,MAAWgD,KAAEc,EAAApG,WACdkC,QAACe,GAAoBuC,EAAOxF,UAAQmF,IAAGD,IAGvD+C,EAAO1H,YAAQA,EAEZR,GAdf,SAuBgBkI,cAAOxH,EAAAyH,GAAA,GAAmB,IAACC,EAAA1H,EAAAP,MAAAkH,OAC3Ca,GAAA,EADI,OAGJC,IACA,IAAAC,GACAF,GAAA,EACAxH,EAAAT,UAAAmF,IAAA,YACA1E,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OACAiB,EAAAV,cAAAkD,cAAA,cAAA3D,MAAAE,QAAA,SACwBiB,IAAf2H,GAAmBF,EAAAA,GACxBD,GAAA,EACII,EAAAA,cAAiBpF,cAAA,QAAA3D,MAAAE,QAAA,OACrBiB,EAAAV,cAAAkD,cAAA,cAAA3D,MAAAE,QAAA,QACUiB,EAACP,UAAYiF,IAAA,cAGnB+C,GAAY,EACZzH,EAAAT,UAAAU,OAAA,YACKD,EAAMV,cAAEkD,cAAA,QAAA3D,MAAAE,QAAA,SAINO,CAAAA,GAAAA,EAAAA,QAAAA,EAAckD,MAAAA,EAAAA,OAb7B,SAsBgBgF,eAAcxH,EAAAyH,GAAA,GApB1B,IAwBIC,EAAA1H,EAAAP,MAAAkH,OACJ,IAAAa,GAAA,EAkBI,OAjBJC,IAAmB,IAAAC,GAAS1H,GAAGP,EAAMO,EAAAT,UAAAmF,IAAA,YACvC1E,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OAhBUiB,EAAGV,cAAckD,cAAc,cAAc3D,MAAME,QAAU,SAoBzE2I,EAAA,IAAAA,EAAA,GACAF,GAAA,EACAxH,EAAAT,UAAAmF,IAAA,YACA1E,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OACS8I,EAAAA,cAAmBJ,cAAkB,cAAE5I,MAAAE,QAAA,UAEhCyI,GAAY,EACVxH,EAAG8H,UAASC,OAAM,YACrBtI,EAAMkH,cAAQnE,cAAA,QAAA3D,MAAAE,QAAA,SAIhB,CAAAiB,GAAAA,EAAMwH,QAAAA,EAAE/H,MAAAO,EAAAP,OARrB,SAASoI,eAiBcvI,EAAckD,GAAc,GAhB/C,IAAIgF,EACJ,IAkBYQ,EADWhI,EAAGP,MACPsI,MAAA,KAhBfL,EAiBc1H,EAACT,MAAAA,OAmDf,OAhDQkI,EACG,IAANC,GACMnI,EAAAA,UAAcmF,IAAA,YACdpF,EAAAA,cAAckD,cAAc,QAAQ3D,MAAME,QAAU,OACpDO,EAAAA,cAAckD,cAAc,cAAc3D,MAAME,QAAU,QAC7DyI,GAAU,GAElBE,EAAA,GAAA,KAAA1H,EAAAP,MAAAwI,MAAA,gBAAA,IAAAtB,OACGqB,EAAA,GAAArB,OAAA,GACH3G,EAAAT,UAAAmF,IAAA,YACW1E,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OACOiB,EAAGP,cAAY+C,cAAc,qBAAsB3D,MAAAE,QAAA,QACzDiJ,GAAcrB,IAEXrH,EAAAA,UAAckD,OAAa,YAC3BlD,EAAAA,cAAckD,cAAc,QAAA3D,MAAqBA,QAAa,OACvD2I,GAAK,IAGZlI,EAAAA,UAAckD,IAAAA,YACjBgF,EAAOlI,cAAOkD,cAAA,QAAA3D,MAAAE,QAAA,OAClBiB,EAAAV,cAAAkD,cAAA,cAAA3D,MAAAE,QAAA,QACGyI,GAAA,GAKPE,EAAA,EACGA,EAAA,GAAA,KAAA1H,EAAAP,MAAAwI,MAAA,gBAAA,IAAAtB,OACWqB,EAAA,GAAArB,OAAA,GAClB3G,EAAAT,UAAAmF,IAAA,YACJ1E,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OAEOiB,EAAAV,cAAAkD,cAAA,qBAAA3D,MAAAE,QAAA,QAAGyI,GAAA,IAAqB/H,EAAAA,UAAAA,OAAAA,YAAMO,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OACvCyI,GAAA,IAGFxH,EAAAT,UAAAmF,IAAA,mBACA1E,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OACAiB,EAAAV,cAAAkD,cAAA,oBAAA3D,MAAAE,QAAA,QACAyI,GAAA,GAGQA,GAAc,EAKd,CAAAxH,GAAAA,EAAAwH,QAAAA,EAAA/H,MAAAO,EAAAP,OANR,SAceH,eAAckD,EAAAA,GAAc,GAbvC,IAcUgF,GAAClI,EAENoI,EAAM1H,EAAAP,MAAAkH,OAqBX,OAnBQa,IAEGlI,IAAAA,GACPkI,GAAA,EACJxH,EAAAT,UAAAmF,IAAA,YAGO1E,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OAAGiB,EAAAV,cAAAkD,cAAA,cAAA3D,MAAAE,QAAA,SAAS,IAAA2I,GAAAA,EAAA,GAAS1H,GAAGP,EAAMO,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OACvCiB,EAAAV,cAAAkD,cAAA,cAAA3D,MAAAE,QAAA,QAXUiB,EAAGT,UAAUmF,IAAI,cAe7B8C,GAAA,EACAxH,EAAAT,UAAAU,OAAA,YACAD,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,SAKYiB,CAAEA,GAAAA,EAACP,QAAAA,EAAYA,MAAAO,EAAAP,OAH3B,SAaYyI,iBAAAlI,EAAAyH,GAAA,GAZR,IAaQD,GAAU,EAERE,EAACpI,EAAAA,MAAAA,OAcX,OAZAmI,IAEU,IAAAC,GAASF,GAAA,EAASxH,EAAGP,UAAAA,IAAAA,YAAMO,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OACvCiB,EAAAV,cAAAkD,cAAA,cAAA3D,MAAAE,QAAA,UAGFyI,GAAA,EACAxH,EAAAT,UAAAU,OAAA,YACAD,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,SAIQyI,CAAAA,GAAAA,EAAUA,QAAAA,EAAI/H,MAAAO,EAAAP,OADtB,SAUQ0I,sBAAAnI,EAAAyH,GAAA,GACA,IAAAD,GAAc,EACV/H,EAAS,GARjB,GAWYA,EAAQkG,CACR,IAAAtG,EAAAW,EAAAoI,QAAA,qBAAA,EACAZ,EAAUxH,EAAIwC,cAAA,iBACd6F,EAAArI,EAAA2D,iBAAA,uBACAoD,EAAe1H,EAAQA,EAAAsE,iBAAW,QAAA,GAR1C,IAWYtE,IAAOsE,EAAAA,EAAAA,EAAAA,EAAiBgD,OAAQlF,IAAAA,CACpC,IAAAkE,EAAA0C,EAAAC,GAGH,GAAM3C,EAAAC,SAAA,KAAAD,EAAAlG,MAAA,CACHA,EAAAkG,EAAAlG,MAVA+H,GAAU,EAcJjI,EAAAA,UAAcU,OAAW,YAEnBsI,EAAO5B,OAAM,GACdnE,EAAAA,iBAA2B,QAAOzD,QAAOiI,GAAUA,EAAAnI,MAAAE,QAAA,QAGtE,MAGMyI,GAAA,EAAiBT,EAAAxH,UAAAmF,IAAA,YAPX6D,EAAS5B,OAAS,IAUtCtH,EAAAmD,cAAA,cAAA3D,MAAAE,QAAA,UAMA,MAAA,CAAAiB,GAAAA,EAAAwH,QAAAA,EAAA/H,MAAAA,GAEA,SAUeH,kBAAckD,EAAAA,GAAqB,EAAOzD,EAAU,KAT/D,IAUUyI,GAAClI,EARX,GAUQmI,EAAA,CACAD,IAAAA,EAAUxH,EAAAP,MAAKkH,OAGH,IAATpH,GACAiI,GAAA,EACHxH,EAAAT,UAAAmF,IAAA,YACA8C,EAAOlI,cAAOkD,cAAA,QAAA3D,MAAAE,QAAA,OACXQ,EAAAA,cAAiBiD,cAAW,cAAA3D,MAAAE,QAAA,SACdyD,IAAdlD,GAAckD,EAAAA,GAEzBgF,GAAA,EATQxH,EAAGV,cAAckD,cAAc,QAAQ3D,MAAME,QAAU,OAW/DiB,EAAAV,cAAAkD,cAAA,cAAA3D,MAAAE,QAAA,QACOiB,EAAAT,UAAAmF,IAAA,cAAqB1E,GAAGP,EAAMO,EAAAT,UAAAU,OAAA,YACzCD,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,QAKA,MAAA,CAAAiB,GAAAA,EAAAwH,QAAAA,EAAA/H,MAAAO,EAAAP,OAGA,SAMQgI,cAAYzH,EAAAyH,GAAA,GACZ,IAAIzH,GAAU,EAgBtB,OApBIA,EAMQwH,UAAUvH,OAAI,eAGjBwH,IACGzH,EAAA4F,SAEA4B,GAAA,EAEJxH,EAAAT,UAAAU,OAAA,iBAGMuH,GAAA,EAAkBxH,EAAGP,UAAAA,IAAAA,iBAGnC,CAAAO,GAAAA,EAAAwH,QAAAA,EAAA/H,MAAAO,EAAAP,OAMA,SAAS+I,mBAAmBxI,EAAIyH,GAAa,GAIzC,IAAIA,GAAY,EACZC,EAAA1H,EAAAP,MAAAkH,OA4BkC,OA1B9Bc,IAEAC,EAAA,EAIoB,OAAT1H,EAAGyI,aAAM,aAGbjB,GAAA,EACHxH,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OAFAiB,EAAGT,UAAUU,OAAO,cAOjBX,GAAckD,EACrBxC,EAAAT,UAAAmF,IAAA,YACG1E,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,OACHiB,EAAAV,cAAAkD,cAAA,wBAAA3D,MAAAE,QAAA,UAKJyI,GAAA,EACJxH,EAAAT,UAAAU,OAAA,YAEOD,EAAAV,cAAAkD,cAAA,QAAA3D,MAAAE,QAAA,SAAgC,CAAAiB,GAAAA,EAAAwH,QAAAA,EAAA/H,MAAAO,EAAAP,OAI3C,MACIyD,UACIA,YAAUvD,EAAS6C,GACfY,KAACsF,GAAQ/I,SAAG+I,cAAQC,GACpBvF,KAACwF,SAAYF,EACrBtF,KAAAwF,aAIIC,aACYjG,KAAgB5C,GAAC2D,iBAAe,YAC9BtE,QAASyJ,IAEXA,EAAMJ,iBAAU,QAAA,KACXK,MAAAA,EAAY1J,EAAOC,cAGjBC,KAAAA,UACG6D,KAAC/D,YAAOA,GAGtBA,EAAAE,UAAAwD,SAAA,QACFK,KAAA4F,MAAA3J,GAEV+D,KAAA6F,KAAA5J,OAQId,KAAAA,GACAA,EAAAgB,UAAAmF,IAAA,QAKAsE,MAAME,GACNA,EAAYzH,UAAQlD,OAAO,QAI3BwK,YAAEI,GAEV/F,KAAApD,GAAA2D,iBAAA,mBACAlC,QAAAlD,IACAA,IAAA4K,GAGSvG,KAAAA,MAAiBrE,MAA1BoB,SAUUyJ,iBAAc,oBAAA,WAGLzJ,SAAM6C,cAAA,QAArB,MAEMzC,EAAWJ,SAAGA,eAASiB,UAEzBwI,EAAazJ,SAAA6C,cAAA,UAEP6G,EAAK1J,SAAA6C,cAAA,QAMnBzC,EAAAJ,SAAAiB,gBAAAb,aAmBQ,SAAAuJ,GAEA,IAAO7J,EAVHM,EAhBIA,KA6BhBN,EAAA6J,EAAA,QACUC,GAtCS,SAsC2BxJ,EA7BxC,QA8BIyJ,EAAYF,EAAU1C,OACjB6C,GA7BX,QA6BwCF,EAxCzB,QA6BP9J,EAAQ6J,EAAe,OAa/BvJ,EA/BA,SAgCJN,EAAA6J,EAAA,QA7BAI,CAAA,CACAN,QAAA,KACAO,OAAA,IACAC,OAAA,IACAC,OAAA9J,EAAA,KAgCI,MAAMvB,EAAesL,EAAElD,aACnBmD,EAAeC,EAAApD,aAPvB,SAWYxF,EAAK6I,GAVb9J,EAAEf,iBAaF,MAAA8K,EAAA9G,KAAAqF,aAAA,cAAArF,KAAAqF,aAAA,QATMsB,EAAgBpK,SAAS6C,cAAc0H,GAajD,GAAMC,EAAQxK,CACd,MAAAsK,EAAAF,EAAAK,UAEQpJ,OAAC4B,SAAAA,CACPxB,IAAA6I,EACFI,SAAA,YA3BIhB,EAWqBxK,MAAA4K,UAAA,iBAAAF,SAAAC,QAuBZc,SAAAA,iBAAsB,kCAV7B7I,QAWY8I,IAVdC,EAWQC,iBAAO9C,QAAc+C,KANjC,MAAMC,EAEFzH,YAWe0H,GACVxH,KAAAwH,KAAAA,EAAArL,UAAAwD,SAAA,aAAA,KAAA6H,EACDxH,KAAKyH,oBAAiB,CACjBC,KAAAA,cAEDL,MAAS9C,eACToD,MAAAlD,eACJnC,MAAAsF,eAEKC,QAAS/C,iBAETgD,UAAUN,cACnBO,SAAAC,kBAEKR,MAAMpC,mBACF6C,QAAOlD,uBAGR/E,KAAAyH,cAAoBI,CAAAA,UAAM,SAAA,SAAA,cAAA,aAAA,WAAA,YAAA,eAC1B7H,KAAA0H,eAAsBQ,CAAAA,cAAM,aAG5B,OAAAlI,KAAAwH,OAKJxH,KAAA6H,OAAA7H,KAAAmI,WAAAX,GAGJY,KAAAA,KAAcvM,KAAK2L,OAGnBM,KAAAN,GAhBI,GAkBJW,EAAAA,SAlBSX,EAAKrL,UAAUwD,SAAS,eAAgB,CAqB7C,MAAAkI,EAAA7H,KAAA6H,OACMQ,EAAeR,EAAIjF,OAEjBzH,KAAAA,eAAS0M,EAAA7H,KAAAsI,gBAEbJ,EAAAK,QAAA,KAlBAL,EAAOK,QAAW1M,GAASmE,KAAKoI,cAAcvM,EAAO2L,EAAMK,GAqB/DL,EAAArL,UAAAmF,IAAA,gBAhBJ8G,cAoBIC,EAAgBb,EAASK,GACzBQ,EAAAA,iBACAA,KAAAA,WAAgBb,EAAOK,GAjB3BM,WAoBIE,GACAA,MAAAA,EAAgB,GAGhBA,EAA0BA,CAAAzF,EAAA2C,KAEpB,MAACN,EAAc1E,EAAAA,cAAiBgF,GAC/BiD,IAEAX,EAAMjF,GAAAzH,IAAb,OAKRkN,EAAA,OAAA,eACAA,EAAA,QAAA,gBACAA,EAAA,QAAA,gBACAA,EAAA,QAAA,gBACII,EAAeZ,UAAe,kBAC1BQ,EAAMZ,QAAqBA,oBAC3BY,EAAMX,YAAsBA,4CAC5BW,EAAMK,cAAqB,qDArB3BL,EAAgB,aAAc,yBAuB9BA,EAAA,cAAA,0BACAA,EAAkBR,WAAQ,YACtBQ,EAAcR,SAAW,wBACzBQ,EAAc,SAAQnB,yBAGtBW,EAAMc,OAAQnB,EAAAjH,iBAAA,wGAtBlBsH,EAuBQe,QAAUpB,EAAMjH,iBAAA,kBAEhBsI,EAdZJ,eAuBQZ,EAAAiB,GAEA,MAAIpB,EAAeqB,KAAQtB,cACvBkB,EAAiB3I,KAAQ0H,eACzBsB,EAAuB,GArB/B,IAyBQL,MAAMM,KAASpB,EAAO,CACtBmB,MAAME,EAAUrB,EAAO9L,GAGvBA,IAAGiN,OAAKxK,EAERwK,MAAML,EAAU,CACpBC,SAAA,OAEIM,MAAOF,EACDH,SARV7I,KAAAkH,oBAAAnL,IAAA,IAAAoN,SASAF,WAAA,EACJG,cAAA,IAEOV,UAAAA,GAIfjB,EAAAsB,SAAAhN,KACAiN,EAAAF,EAAAH,IAGAjB,EAAAqB,SAAAhN,KACA4M,EAAAC,SAAA,SACAI,EAAAF,EAAAH,IAGwB,aAApBL,IACUK,EAAAM,WAAA,EAASD,EAAAF,EAAAH,IAA+B,YAAZM,GAAiBC,EAAA3F,OAAA,IAAE6F,EAAaC,UAAM,EAAUL,EAAGF,EAAAH,SAGzD,IAAV1I,GACJqJ,OAAAA,OAAWrJ,EAAiBN,GAlB1C,OAuBYO,EAVhBoI,eAwBgBO,GAvBZ,MAwBQD,SAAAA,EAAAM,MAAAA,EAAAL,SAAAA,EAAAI,UAAAA,GAAA,EAAAG,cAAAA,EAAA,IAAAC,SAAAA,GAAA,GAAAV,EAERU,EACJH,EAAA7K,QAAA4B,IAvBY,MAAMqJ,EAAWrJ,EAAO9D,UAAUwD,SAAS,iBAyBvD0E,EAAAiF,EAAArJ,EAAA9D,UAAAwD,SAAA,YAAAM,EAAAsJ,SAEJ,GAAAD,EAAA,CACArJ,EAAAM,iBAAA,4BACAlC,QAAAsD,IACAA,EAAAnC,iBAAA,QAAA3D,IACAgN,EAAA5I,EAAAoE,UAIyB6E,EAAK1J,iBAAAoJ,EAAA/M,IAAU,MAAAwI,EAAA6E,EAAA/M,UAAAwD,SAAA,YAAqByJ,EAAgCP,EAAAK,EAAA7E,EAAA+E,GAC/EV,EAAgBQ,EAAK7E,KAF/BmF,qBAmBuBb,GAlBnB,MAmBQD,SAAAA,EAAAA,MAAAA,EAAiBe,SAAAA,EAAaZ,UAAAA,GAAc,EAAExE,cAAAA,EAAY+E,IAAAA,SAAcC,GAAA,GAAAV,EAC3ED,EAAM,GAEP,GAAAW,EACJH,EAAA7K,QAAA4B,IACOyI,MAAAA,EAAgBzI,EAAA9D,UAAAwD,SAAA,iBAC3B0E,EAAAiF,EAAArJ,EAAA9D,UAAAwD,SAAA,YAAAM,EAAAsJ,SAGI,GAAAD,EAAA,CACMI,MACAC,EADkBlB,EAAAA,cAAuB,SACjBkB,KAGrBC,EAAUD,GAA0Bd,EAAE5I,EAAAoE,UAI3CwF,CACR,MAAAxF,EAAA6E,EAAA/M,UAAAwD,SAAA,YAEAgK,EAAyBT,EAAAtG,KAGZ7G,EAAe0N,GAFlBK,EAEkBjB,EAAAK,EAAA7E,EAAA+E,GAEpBP,EAAAK,EAAA7E,GArBJ,OAwBQyF,EArBZC,WAyBWD,EAAAA,GAGXE,MAAAA,EAAsBhK,KAAEyI,eAAAZ,EAAA7H,KAAAwJ,sBACdtD,EAAWlG,KAAA2J,iBAAAD,GAEZO,EAAiBjK,KAAEgK,gBAAAN,GAEE,OAAlBvK,KAAAyK,UAAWV,IAKnB,IAAAW,WAAa7J,KAAAwH,KAAAyC,GAzBjBN,iBAAiB9B,GA6BrB,MAAAiC,EAAA,GAEA,IAAA,IAAA/N,KAAA8L,EAAA,CACA,MAAAqB,EAAArB,EAAA9L,GAEMmO,YAAYhB,IAAAA,EAAA9E,UAED0F,EAAS/N,GAAAmN,EAAA9E,SAIlB,OAAS0F,EAGbE,gBAAAnC,GACJ,MAAA3B,EAAA,GAEA,IAAA,IAAAnK,KAAA8L,EAAA,CACSL,MAAM0B,EAAArB,EAAA9L,GACP,UAAAmN,IACMP,EAAQ5M,GAAAmN,EAAA7M,OAEO,OAAA6J,GAkQ7B3J,SA0BYiD,iBAAkB,SAACJ,SAAcrC,GAzBzC,MA0BQ0C,EAAM+I,EAAO/I,OAEb0K,EAAYxO,EAAOQ,UAAUwD,SAAA,SAC7BwK,EAAY9O,EAAWc,UAAAwD,SAAA,iBAAAF,EAAAuF,QAAA,iBACvBzI,EAASe,EAAKnB,UAAcwD,SAAA,OAAYF,EAAAA,EAAAuF,QAAA,QA1BhD,IA4BQmF,EAmBZ,GA7CQC,IACAD,EA4BgBhK,GAGZkK,IAEAF,EAAQ1K,EAAEuF,QAAA,WAGdmF,IAENjP,QAAAiP,EAAA,KAEF5N,SAAAe,KAAAnB,UAAAU,OAAA,cAIIyN,EAAS,CACTA,MAAU9K,EAAAA,EAAiB+K,QAAOJ,MAE9B,GAAMK,EAAO,CAEbjO,MAASe,EAAKnB,SAAcsO,eAAYC,GAChCvO,EAAUU,EAAOuC,cAAc,QAC/BjD,EAAcgO,EAAA5J,iBAAc,WAE5C4J,EAAA1O,MAAAE,QAAA,QAEIgP,EAAAA,MAAgBtP,QAAA,EAChBsP,SAAenL,KAAAA,UAAiB8B,IAAA,aAEtBkJ,EAAUjO,OAAS6C,GAEhB9B,EAAKnB,QAAUU,IAChBV,IAAUU,aAAO,SAAc,CACrByE,cAAIrB,MAMZuH,GACD,IAAAD,EAAAC,QA5BjB,MAAM8C,EAoCmB/N,SAAIqO,cAAe,2BAnCtCD,EAoCyBxO,SAAUU,cAAOwE,qBAX5C,SAyCQwJ,IACJ,MAAAC,EAAAvO,SAAA6C,cAAA,SAEA,GAAOyL,EAAAA,CACV,IAAAE,EAAAD,EAAA1L,cAAA,cAEQ4L,EAAeF,EAAE1L,cAAA,aACX7C,EAAS6C,EAAAA,cAAsB,sBAChC6L,EAAY7L,EAAczC,YACzBiO,EAAUpH,EAAY0H,YAE7BC,SAAY5O,EAASkO,EAAAA,GAGfjO,GAAAoO,EACME,EAAKtH,UAAY3G,OAAAwE,GAGpBlF,EAAUwD,UAAS2B,IAAAD,GAU5B9E,EAHJ0O,EAFwBH,EAAA1L,cAAA,eACpBzC,YACJ,GAGgC,QACzByO,EAAAH,EAAA,mBA7FXX,GACAA,EAoCY9K,iBAAA,QAAA3D,IACJA,EAAAG,iBAEA,MAAIqP,EAAc9O,SAAC6C,cAAc,wBAEjC7C,SAAI+O,KAAUnP,UAAG8O,IAAAA,aAEjBG,EAAAA,UAAaE,OAAY,gBACzBF,EAAAA,UAAaH,IAAAA,iBAlCrBN,GAwCJA,EAAAnL,iBAAA,QAAA3D,IACU0P,EAAAA,iBACF,MAAUf,EAAGjO,SAAS6C,cAAqB,wBAE3C7C,SAAYe,KAAGf,UAAS6C,OAAAA,aACxBoL,EAAMgB,UAAgB3O,OAAC2G,eACnBqH,EAAAA,UAAavJ,IAAA,kBARrBmK,IAqDI,MAAAF,EAAAA,KAEJ,MAAAT,EAAAvO,SAAA6C,cAAA,SAEWxB,EAAOkN,EAAAtH,aAGJgI,EADPhM,SAAiBJ,cAAU,UACdoE,aAClB,IAAAqH,EAIEa,GAAAA,EAAAA,UAAmB/L,SAAM,iBAAA,CAIf3D,EAAgBwP,EAFbnN,SAAYe,cAAI,SAEHoE,kBAGdxF,EAAKuN,EAAkBI,EAG7B,OAAAd,GAtDV,SAASG,EAAWpH,GA2DxB,IAAAkH,EAAAvO,SAAA6C,cAAA,SAGaI,EA5DQjD,SAAS6C,cAAc,WA2DdoE,aAEhBxH,EAAgBO,SAAAkO,eAAA,eAIdN,GAAAA,EAAM1O,CACN0O,IAAM1O,EAAMJ,EAAOmI,aACtBoI,GAAMD,EAEPb,EAAA3O,UAAAwD,SAAA,mBACFiM,EAAAD,EAAAJ,KAGVT,EAAA3O,UAAAwD,SAAA,wBACiBrC,IAOGsG,EAACpE,YAAiBoM,EAChB5P,SAAAA,KAAcG,UAAEmF,IAAA,cAGlB/E,SAAWsP,KAAAA,UAASxG,OAAa,cAK7ByG,EAAAA,YAAQlI,EAAAmI,YACRC,EAAMC,MAAAA,QAAc,OAGtBC,EAAKzQ,MAAAE,QAAA,OA5DvBqP,EAiEwBzO,QA/DxBqB,OAAO4B,iBAiEsB,UAAgB,WAhEzCwL,EAiEoBhL,SA9DxB,MAAM0L,EAkE2BtM,SAAAA,iBAAc,iBA2CnD,GA3GQsM,EAmEwBnI,OAAE,GAjE1BmI,EAoE2BS,QAAQ/E,IAnE/BA,EAoEoBpJ,iBAAKuN,QAAkBxO,IACvBkK,EAAAA,iBAGJmF,OAAAA,SAAa/N,CACRlC,IAAAA,IAELkQ,SAAQC,eA7DhC/P,SA0EcgE,iBAAA,cAAAlC,QAAAkO,IAEJA,EAAA/M,iBAAA,QAAAzC,IAxEF,GAyEJA,EAAAf,iBAzEQuQ,EAAKpQ,UAAUwD,SAAS,mBAAoB,CA4ExD,MAAAwK,EAAA5N,SAAAkO,eAAA,oBACJN,EAAA1O,MAAAE,QAAA,QACAwO,EAAA1O,MAAAJ,QAAA,OAEUmR,OAAcC,SAAIC,KAAUH,EAAAI,SAMtCpQ,SAAAe,KAAAnB,UAAAwD,SAAA,QAAA,CAEA,MAAAyM,EAAA7P,SAAAgE,iBAAA,gBAEA6L,EAAA7I,OAAA,GACA6I,EAAA/N,SAAA,SAAAuF,GAEAA,EAAApE,iBAAA,SAAA,SAAAzC,GACAA,EAAAf,iBAEA,IAAA6P,EAAA7L,KAAAZ,cAAA,KACAuN,EAAAd,EAAAxG,aAAA,QACAuH,EAAAf,EAAAnP,YAGoBH,EAASgE,CACThE,OAASgE,sBAEPyL,KALtBW,EAAAhI,MAAA,KAK4B,IAIVkI,EAAAX,KAAA,CACRY,IAAAC,UAAAC,QACJC,KAAA,OACNC,KAAAA,EAEsBC,WAAM,SAAAC,GAEJ7Q,SAAUgG,KAAOpG,UAAAmF,IAAA,WAEvB+L,QAAA,SAAArE,GAEZzM,SAAA6C,cAAA,kBAIN2C,UAAAiH,EAhF4BzM,SAAS6C,cAAc,2BAA2B1C,YAAckQ,GAoF5FU,SAAA,WAmBI,GAlBqB7C,SAAcnN,KAACnB,UAAMU,OAAA,UAO9Ce,OAAAuO,SAAA,CArFgCnO,IAAKuN,IAwFrCtE,SAAA,WAGAmF,EAAA/N,QAAAuF,GAAAA,EAAAzH,UAAAU,OAAA,WAC4B+G,EAAAzH,UAAAmF,IAAA,UAEJ+D,QAAaiH,aAAS,KAAA,KAAAK,GAE1Cd,EAAA7G,QAAA,cAAA,CAE4B,MAAAwF,EAAAjO,SAAA6C,cAAA,wBAEI7C,SAAAe,KAAAnB,UAAAU,OAAA,aACF2N,EAAS+C,UAAY1Q,OAAA,eAC7C2N,EAAArO,UAAAmF,IAAA,0BAmBa,IAAAoL,UAAA,cAAA,GAAnB,MAyBJc,EAAMC,SAAkBlR,iBAAS6C,gBACjCsO,EAAMC,SAAiBpR,iBAAS6C,gBAG5BoO,EAAIC,OAAgBG,GAEpBJ,EAAAnP,SAAA,SAAAkE,GACJsL,MAAAtL,EAAA,CAEIoL,KAAAA,0BAMJD,EAASI,OAAcA,GAhGnBJ,EAAYrP,SAAQ,SAAUkE,GAmGdsL,MAAAtL,EAAA,CACZwL,KAAY,kBAWdxR,SAAAkO,eAAA,OAAF,MAvFMuD,EAAczR,SAASgE,iBAAiB,iDAG9C,SAASgN,EAAYxQ,GACjBA,EAAEf,iBACF,IAAI2Q,EAAO3M,KAAKqF,aAAa,QAC7BzH,OAAO6O,SAASE,KAAOA,EAAKzP,QAAQ,IAAK,IAGzC8Q,EAAYzK,OAAS,GAErByK,EAAY3P,QAAQ+I,IAChBA,EAAK5H,iBAAiB,QAAS+N,KAIvC,MAAMU,EAAgB1R,SAASgE,iBAAiB,iBAE5C0N,EAAc1K,OAAS,GACvB0K,EAAc5P,QAAQ4B,IAClB,IAAIiO,aAAa,OAAQ,CACrB/N,cAAeF,MAS3B,MAAMkO,EAAgB5R,SAASgE,iBAAiB,mCAEhD,GAAI4N,EAAe,CACf,MAAMC,EAAuB7R,SAASgE,iBAAiB,oDAEvD4N,EAAc9P,QAAQgQ,IACnBA,EAAI7O,iBAAiB,QAAUzC,IAC5BA,EAAEf,iBACF,MAAMyD,EAAS1C,EAAE0C,OACX6O,EAAkC,kBAArB7O,EAAOtD,UAAgCsD,EAASA,EAAOuF,QAAQ,kBAC5EuJ,EAAUD,EAAW/D,QAAQ8D,IAE/BD,GACAA,EAAqB/P,QAAQmQ,IAC1B,MAAMC,EAAiBD,EAAWjE,QAAQ8D,IACzCG,EAAW/S,MAAME,QAAU8S,IAAmBF,EAAU,QAAU,SAIzEJ,EAAc9P,QAAQgQ,IAClBA,EAAIlS,UAAUU,OAAO,YAEzByR,EAAWnS,UAAUmF,IAAI,cAKxC,MAAMmM,EAAkBlR,SAAS6C,cAAc,uBACzCuO,EAAiBpR,SAAS6C,cAAc,qBAc9C,SAAS0O,EAAeY,GACpB,IAAIC,EAAaD,EAAOxS,cAAckD,cAAc,eAEpDyN,EAAE6B,GAAQE,MAAM,CACZb,aAAc,EACdc,eAAgB,EAChBC,MAAO,IACPC,WAAW,EACXC,WAAYnC,EAAE8B,GACdM,aAAcpC,EAAE8B,GAChBO,QAAQ,EACRC,UAAU,EACVC,OAAO,EACPC,MAAM,EACNC,UAAW,gBA1Bf7B,GACIA,EAAgBG,SAASrK,OAAS,GAClCuK,EAAeL,GAInBE,GACIA,EAAeC,SAASrK,OAAS,GACjCuK,EAAeH","file":"main.min.js","sourcesContent":["// Функция для анимации исчезновения\r\nfunction fadeOut(element, duration) {\r\n    // Устанавливаем начальное значение прозрачности\r\n    var opacity = 1;\r\n    // Вычисляем шаг изменения прозрачности\r\n    var delta = 1 / (duration / 10); // Предполагаем, что 1 секунда разбивается на 10 шагов\r\n\r\n    // Запускаем таймер для изменения прозрачности\r\n    var timer = setInterval(function() {\r\n        // Уменьшаем прозрачность\r\n        opacity -= delta;\r\n        // Применяем новое значение прозрачности к элементу\r\n        element.style.opacity = opacity;\r\n\r\n        // Если прозрачность достигла нуля, завершаем анимацию\r\n        if (opacity <= 0) {\r\n            clearInterval(timer); // Останавливаем таймер\r\n            element.style.display = 'none'; // Скрываем элемент после анимации\r\n        }\r\n    }, 10); // Здесь 10 миллисекунд - это шаг анимации\r\n}\r\n;\r\n/**\r\n * Функция для блокировки ввода текста, кроме числовых значений, на элементе формы.\r\n * @param {Event} event - Событие ввода.\r\n */\r\nfunction banText(event) {\r\n    var banText = parseFloat(event.key);\r\n\r\n    if (isNaN(banText)) {\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\n/**\r\n * Функция для автоматического изменения ширины поля ввода в зависимости от его содержимого.\r\n * @param {HTMLInputElement} el - Элемент поля ввода.\r\n */\r\nfunction resizeInput(el) {\r\n    let parent = el.parentElement;\r\n    let text = el.value;\r\n    let div = document.createElement('div');\r\n    let width;\r\n\r\n    div.classList.add('size-div');\r\n    div.textContent = text;\r\n    parent.append(div);\r\n\r\n    width = div.clientWidth;\r\n    el.style.width = width + 'px';\r\n    div.remove();\r\n}\r\n\r\n/**\r\n * Функция для предотвращения действия по умолчанию в событии.\r\n * @param {Event} e - Событие.\r\n */\r\nfunction preventDefaultFunc(e) {\r\n    e.preventDefault();\r\n}\r\n\r\n/**\r\n * Функция для форматирования числового значения как цены с использованием разделителя тысяч.\r\n * @param {number} num - Форматируемое число.\r\n * @returns {string} - Отформатированная строка цены.\r\n */\r\nfunction formatPrice(num) {\r\n    num = parseFloat(num);\r\n    return num.toLocaleString('en-US', {useGrouping: true}).replace(/,/g, ' ');\r\n}\r\n\r\n/**\r\n * Функция для получения координат элемента на странице.\r\n * @param {HTMLElement} elem - Элемент, координаты которого необходимо получить.\r\n * @returns {Object} - Объект с координатами элемента (top, left).\r\n */\r\nfunction getCoords(elem) {\r\n    var box = elem.getBoundingClientRect();\r\n    var body = document.body;\r\n    var docEl = document.documentElement;\r\n    var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\r\n    var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;\r\n    var clientTop = docEl.clientTop || body.clientTop || 0;\r\n    var clientLeft = docEl.clientLeft || body.clientLeft || 0;\r\n    var top = box.top + scrollTop - clientTop;\r\n    var left = box.left + scrollLeft - clientLeft;\r\n\r\n    return {\r\n        top: top,\r\n        left: left\r\n    };\r\n}\r\n\r\n/**\r\n * Функция для извлечения параметров из URL.\r\n * @param {string} url - URL-адрес, из которого извлекаются параметры (по умолчанию текущий URL).\r\n * @returns {Object} - Объект с параметрами из URL.\r\n */\r\nfunction getParams(url = window.location) {\r\n    let params = {};\r\n\r\n    new URL(url).searchParams.forEach(function (val, key) {\r\n        if (params[key] !== undefined) {\r\n            if (!Array.isArray(params[key])) {\r\n                params[key] = [params[key]];\r\n            }\r\n            params[key].push(val);\r\n        } else {\r\n            params[key] = val;\r\n        }\r\n    });\r\n\r\n    return params;\r\n}\r\n\r\n/**\r\n * Функция для получения текущего времени в формате \"часы:минуты\".\r\n * @returns {string} - Текущее время в формате \"часы:минуты\".\r\n */\r\nfunction getCurrentTime() {\r\n    const now = new Date();\r\n    let hours = now.getHours();\r\n    let minutes = now.getMinutes();\r\n\r\n    hours = hours < 10 ? '0' + hours : hours;\r\n    minutes = minutes < 10 ? '0' + minutes : minutes;\r\n\r\n    return hours + ':' + minutes;\r\n}\r\n\r\n\r\n/**\r\n * Функция для проверки, является ли объект пустым.\r\n * @param {Object} obj - Проверяемый объект.\r\n * @returns {boolean} - Возвращает true, если объект пустой, иначе возвращает false.\r\n */\r\nfunction isObjectEmpty(obj) {\r\n    return JSON.stringify(obj) === '{}';\r\n}\r\n\r\n// клик вне элемента\r\n\r\nfunction clickOutside(el, btn, cl) {\r\n    var element = document.querySelector(el),\r\n        button = document.querySelector(btn);\r\n\r\n    document.addEventListener('click', e => {\r\n        let target = e.target;\r\n        let itsEl = target == element || element.contains(target);\r\n        let its_btn = target == button;\r\n        let its_el_is_open = element.classList.contains(cl);\r\n\r\n        if (!itsEl && !its_btn && its_el_is_open) {\r\n            element.classList.toggle(cl);\r\n        }\r\n    });\r\n}\r\n;\r\n\r\n// валидация формы\r\n\r\n// кастомный select\r\n\r\nclass CustomSelect {\r\n    /**\r\n     * Конструктор класса CustomSelect.\r\n     * @param {string} method - Название метода инициализации. Может быть 'init', 'reinit' или 'destroy'.\r\n     * @param {Object} options - Объект с настройками.\r\n     * @param {HTMLElement} options.selectElement - HTML-элемент, представляющий оригинальный выпадающий список.\r\n     * @param {number} [options.show=8] - Количество элементов, которые нужно показать в выпадающем списке без прокрутки (по умолчанию 8).\r\n     * @param {string} [options.icon=null] - Иконка для кастомного выпадающего списка. По умолчанию используется null.\r\n     */\r\n    constructor(method, options) {\r\n        // Сохраняем переданный элемент выпадающего списка и количество элементов, которые нужно показать\r\n        this.select = options.selectElement;\r\n        this.show = options.show || 6;\r\n        this.icon = options.icon || null;\r\n        this.isMobile = document.documentElement.clientWidth < 575.98;\r\n\r\n        // Если метод инициализации равен 'init', инициализируем пользовательский выпадающий список\r\n        if (method === 'init') {\r\n            this.initCustomSelect(this.select);\r\n        } else {\r\n            // Если метод не 'init', проверяем, является ли элемент select\r\n            if (this.select.nodeName === 'DIV') {\r\n                // Если элемент DIV, находим все радио-кнопки внутри него\r\n                this.options = this.select.querySelectorAll('input[type=\"radio\"]');\r\n                // Создаем стандартный выпадающий список\r\n                this.defaultSelect = this.createDefaultSelect();\r\n                // Заменяем пользовательский выпадающий список на стандартный\r\n                this.replaceCustomWithDefault();\r\n\r\n                // Если метод переинициализации равен 'reinit', повторно инициализируем пользовательский выпадающий список\r\n                if (method === 'reinit') {\r\n                    this.initCustomSelect(this.defaultSelect);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Инициализирует кастомный выпадающий список на основе оригинального элемента select.\r\n     * @param {HTMLElement} select - HTML-элемент, представляющий оригинальный выпадающий список.\r\n     */\r\n    initCustomSelect(select) {\r\n        // Получаем список опций выпадающего списка\r\n        this.options = select.querySelectorAll('option');\r\n        this.select = select;\r\n        // Создаем кастомный выпадающий список и настраиваем его обработчики событий\r\n        const customSelect = this.createCustomSelect(select);\r\n        // Заменяем оригинальный выпадающий список кастомным\r\n        this.replaceSelectWithCustom(customSelect);\r\n        // Назначаем обработчики событий для кастомного выпадающего списка\r\n        this.customSelectEvents(customSelect);\r\n    }\r\n\r\n    /**\r\n     * Создает кастомный выпадающий список на основе переданного оригинального элемента select.\r\n     * @param {HTMLElement} select - HTML-элемент, представляющий оригинальный выпадающий список.\r\n     * @returns {HTMLElement} - HTML-элемент, представляющий кастомный выпадающий список.\r\n     */\r\n    createCustomSelect(select) {\r\n        // Создаем новый div и копируем классы из оригинального селекта\r\n        let selectClasses = Array.from(select.classList);\r\n        let customSelect = document.createElement('div');\r\n        selectClasses.forEach(className => customSelect.classList.add(className));\r\n        customSelect.classList.add('custom-select')\r\n        if (select.required) {\r\n            customSelect.classList.add('required')\r\n        }\r\n\r\n        // Создаем заголовок и содержимое списка выбора\r\n        let selectTitle = this.createCustomSelectTitle(customSelect);\r\n        let selectContent = this.createCustomSelectContent(customSelect);\r\n\r\n        // Добавляем заголовок и содержимое к новому выпадающему списку\r\n        customSelect.append(selectTitle);\r\n        customSelect.append(selectContent);\r\n\r\n        return customSelect;\r\n    }\r\n\r\n    /**\r\n     * Создает заголовок для кастомного выпадающего списка.\r\n     * @returns {HTMLElement} - HTML-элемент, представляющий заголовок кастомного выпадающего списка.\r\n     */\r\n    createCustomSelectTitle(customSelect) {\r\n        // Получаем все опции выбора и преобразуем их в массив\r\n        let optionsArray = Array.from(this.options);\r\n\r\n        // Находим выбранную опцию\r\n        let selectedOption = optionsArray.find(option => option.selected);\r\n        // Создаем элементы для заголовка кастомного селекта\r\n        let selectTitle = document.createElement('div'); // Создаем div для обертки заголовка\r\n        let selectTitleText = document.createElement('div'); // Создаем div для текста заголовка\r\n        let selectTitleIcon = document.createElement('div'); // Создаем div для иконки заголовка\r\n\r\n        // Если иконка не задана, используем иконку стрелки вниз по умолчанию\r\n        if (this.icon === null) {\r\n            this.icon = '<svg width=\"12\" height=\"9\" viewBox=\"0 0 10 7\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.64637 6.0565L0.353478 1.7636C0.158216 1.56834 0.158216 1.25176 0.353478 1.0565L1.05686 0.353112C1.25193 0.158042 1.56814 0.157822 1.76348 0.352619L4.99992 3.58005L8.23637 0.352619C8.43171 0.157822 8.74792 0.158042 8.94299 0.353112L9.64637 1.0565C9.84163 1.25176 9.84163 1.56834 9.64637 1.7636L5.35348 6.0565C5.15822 6.25176 4.84163 6.25176 4.64637 6.0565Z\" fill=\"currentColor\"/></svg>';\r\n        }\r\n\r\n        // Добавляем классы для стилизации\r\n        selectTitle.classList.add('select-title'); // Добавляем класс для обертки заголовка\r\n        selectTitleText.classList.add('select-title__text'); // Добавляем класс для текста заголовка\r\n        selectTitleIcon.classList.add('select-title__icon'); // Добавляем класс для иконки заголовка\r\n        // Устанавливаем текст заголовка и иконку\r\n        selectTitleText.textContent = selectedOption.textContent; // Устанавливаем текст заголовка из выбранной опции\r\n        selectTitleIcon.innerHTML = this.icon; // Устанавливаем иконку заголовка\r\n\r\n        // Добавляем текст и иконку к заголовку\r\n        selectTitle.append(selectTitleText); // Добавляем текст заголовка в обертку\r\n        selectTitle.append(selectTitleIcon); // Добавляем иконку заголовка в обертку\r\n\r\n        if (selectedOption.value !== '') {\r\n            customSelect.classList.add('active');\r\n        }\r\n\r\n        return selectTitle; // Возвращаем сформированный заголовок\r\n    }\r\n\r\n\r\n    /**\r\n     * Создает контент для кастомного выпадающего списка.\r\n     * @returns {HTMLElement} - HTML-элемент, представляющий контент кастомного выпадающего списка.\r\n     */\r\n    createCustomSelectContent() {\r\n        // Создаем контейнер для содержимого выпадающего списка\r\n        let selectContent = document.createElement('div');\r\n        selectContent.classList.add('select-content');\r\n\r\n        // Создаем обертку для опций и добавляем их\r\n        let selectContentWrap = this.createCustomSelectOptions();\r\n        selectContent.append(selectContentWrap);\r\n\r\n        if (this.isMobile) {\r\n            let overlay = document.createElement('div');\r\n            overlay.classList.add('select-content_overlay');\r\n            selectContent.append(overlay);\r\n        }\r\n\r\n        return selectContent;\r\n    }\r\n\r\n    /**\r\n     * Создает обертку для опций кастомного выпадающего списка.\r\n     * @returns {HTMLElement} - HTML-элемент, представляющий обертку для опций кастомного выпадающего списка.\r\n     */\r\n    createCustomSelectOptions() {\r\n        // Создаем обертку для опций\r\n        let selectContentWrap = document.createElement('div');\r\n        selectContentWrap.classList.add('select-content_wrap');\r\n\r\n        // Перебираем опции оригинального селекта и создаем для каждой опции метку\r\n        this.options.forEach((option, index) => {\r\n            // console.log(option)\r\n            // Создаем элементы метки и радио-кнопки\r\n            const label = document.createElement('label');\r\n            const input = document.createElement('input');\r\n            const span = document.createElement('span');\r\n\r\n            // Добавляем созданным элементам классы\r\n            label.classList.add('select-content__wrapper');\r\n            span.classList.add('select-content__radio');\r\n\r\n            // Добавляем радио-кнопке атрибуты и устанавливаем ей тип и имя\r\n            const optionAttributes = [...option.attributes];\r\n            // Перебираем массив атрибутов `<option>`\r\n            optionAttributes.map(attribute => {\r\n                if (attribute.name === 'selected') {\r\n                    input.setAttribute('checked', 'checked');\r\n                    input.checked = true;\r\n                } else {\r\n                    input.setAttribute(attribute.name, attribute.value);\r\n                }\r\n\r\n                if (attribute.name === 'disabled') {\r\n                    label.classList.add('disabled');\r\n                }\r\n            });\r\n            input.setAttribute('type', 'radio');\r\n            input.setAttribute('name', this.select.name);\r\n\r\n            // Устанавливаем текст метки\r\n            span.textContent = option.textContent.trim();\r\n\r\n            // Добавляем радио-кнопку и метку в обертку опций\r\n            label.append(input);\r\n            label.append(span);\r\n            selectContentWrap.appendChild(label);\r\n        });\r\n\r\n        return selectContentWrap;\r\n    }\r\n\r\n    /**\r\n     * Заменяет оригинальный выпадающий список кастомным.\r\n     * @param {HTMLElement} select - HTML-элемент, представляющий кастомный выпадающий список.\r\n     */\r\n    replaceSelectWithCustom(select) {\r\n        // Заменяем оригинальный выпадающий список кастомным\r\n        this.select.replaceWith(select);\r\n    }\r\n\r\n    /**\r\n     * Назначает обработчики событий для кастомного выпадающего списка.\r\n     * @param {HTMLElement} select - HTML-элемент, представляющий кастомный выпадающий список.\r\n     */\r\n    customSelectEvents(select) {\r\n        // Находим заголовок и содержимое списка выбора в кастомном выпадающем списке\r\n        let title = select.querySelector('.select-title');\r\n        let titleText = select.querySelector('.select-title__text');\r\n        let content = select.querySelector('.select-content');\r\n\r\n        // Находим все метки в списке выбора\r\n        let labels = content.querySelectorAll('.select-content__wrapper');\r\n        let labelCount = labels.length;\r\n        let labelHeight = 0;\r\n\r\n        // Вычисляем высоту блока меток, которые будут показаны\r\n        labels.forEach((label, index) => {\r\n            if (index <= this.show) {\r\n                labelHeight += label.offsetHeight;\r\n            }\r\n\r\n            // Добавляем обработчик события клика для каждой метки\r\n            label.addEventListener('click', () => {\r\n                // Получаем текст выбранной метки\r\n                let labelText = label.querySelector('.select-content__radio').textContent;\r\n                let input = label.querySelector('input');\r\n                let inputValue = input.value;\r\n\r\n                // делаем input выбранным\r\n                input.checked = true;\r\n                // Изменяем текст заголовка списка выбора\r\n                titleText.textContent = labelText;\r\n                // Закрываем список выбора\r\n                select.classList.remove('open');\r\n\r\n                if (this.isMobile) {\r\n                    document.body.classList.remove('no-scroll');\r\n                    document.querySelector('main').classList.remove('layer-up');\r\n                }\r\n                // добавляем класс, после первого выбора\r\n                if (!select.classList.contains('active')) {\r\n                    select.classList.add('active');\r\n                }\r\n\r\n                if (inputValue === '') {\r\n                    select.classList.remove('active')\r\n                } else {\r\n                    title.classList.remove('validate')\r\n                }\r\n            });\r\n        });\r\n\r\n        // Если количество меток меньше или равно количеству меток, которые нужно показать,\r\n        // то добавляем класс no-scroll для предотвращения прокрутки\r\n        if (labelCount <= this.show) {\r\n            content.classList.add('no-scroll');\r\n        }\r\n\r\n        // Устанавливаем максимальную высоту блока меток\r\n        content.style.maxHeight = labelHeight + 32 + 'px';\r\n\r\n        // Добавляем обработчик события клика для заголовка списка выбора\r\n        title.addEventListener('click', () => {\r\n            // Закрываем все открытые списки выбора\r\n            document.querySelectorAll('.select').forEach(item => {\r\n                if (item !== select) {\r\n                    item.classList.remove('open');\r\n                    if (this.isMobile) {\r\n                        document.body.classList.remove('no-scroll');\r\n                        document.querySelector('main').classList.remove('layer-up');\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Открываем или закрываем список выбора\r\n            select.classList.toggle('open');\r\n            if (this.isMobile) {\r\n                document.body.classList.toggle('no-scroll');\r\n                document.querySelector('main').classList.toggle('layer-up');\r\n            }\r\n        });\r\n\r\n        // Добавляем обработчик события клика вне кастомного выпадающего списка\r\n        this.clickOutsideSelect(select, title);\r\n    }\r\n\r\n    /**\r\n     * Обрабатывает событие клика вне кастомного выпадающего списка.\r\n     * @param {HTMLElement} select - HTML-элемент, представляющий кастомный выпадающий список.\r\n     * @param {HTMLElement} title - HTML-элемент, представляющий заголовок списка выбора.\r\n     */\r\n    clickOutsideSelect(select, title) {\r\n        document.addEventListener('click', e => {\r\n            let target = e.target;\r\n            let itsEl = target == select || select.contains(target);\r\n            let its_btn = target == title;\r\n            let its_overlay = target.classList.contains('select-content_overlay')\r\n            let its_el_is_open = select.classList.contains('open');\r\n\r\n            // Закрываем выпадающий список, если произошел клик вне его области\r\n            if (!itsEl && !its_btn && its_el_is_open) {\r\n                select.classList.toggle('open');\r\n                if (this.isMobile) {\r\n                    document.body.classList.toggle('no-scroll');\r\n                }\r\n            }\r\n\r\n            if (its_overlay && its_el_is_open) {\r\n                select.classList.remove('open');\r\n                if (this.isMobile) {\r\n                    document.body.classList.remove('no-scroll');\r\n                    document.querySelector('main').classList.remove('layer-up');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Заменяет кастомный выпадающий список на оригинальный.\r\n     */\r\n    replaceCustomWithDefault() {\r\n        this.select.replaceWith(this.defaultSelect);\r\n    }\r\n\r\n    /**\r\n     * Создает оригинальный выпадающий список.\r\n     * @returns {HTMLSelectElement} - Созданный оригинальный выпадающий список.\r\n     */\r\n    createDefaultSelect() {\r\n        // Получаем классы из кастомного селекта\r\n        const customSelect = this.select;\r\n        let selectClasses = Array.from(customSelect.classList);\r\n\r\n        // Создаем элемент select\r\n        let defaultSelect = document.createElement('select');\r\n\r\n        // Получаем имя оригинального селекта\r\n        let selectName = this.options[0].name;\r\n\r\n        // Добавляем классы к созданному селекту\r\n        selectClasses.forEach(className => defaultSelect.classList.add(className) );\r\n        defaultSelect.classList.remove('active', 'custom-select', 'required');\r\n        if (customSelect.classList.contains('required')) {\r\n            defaultSelect.required = true;\r\n        }\r\n\r\n        // Устанавливаем имя оригинального селекта\r\n        defaultSelect.name = selectName;\r\n\r\n        // Добавляем остальные опции\r\n        this.options.forEach(input => {\r\n            defaultSelect.append(this.createDefaultOptions(input));\r\n        });\r\n\r\n        return defaultSelect;\r\n    }\r\n\r\n    /**\r\n     * Создает опцию для оригинального выпадающего списка.\r\n     * @param {HTMLInputElement} input - Элемент input из кастомного селекта.\r\n     * @returns {HTMLOptionElement|boolean} - Созданная опция для оригинального выпадающего списка или false, если input не содержит значения.\r\n     */\r\n    createDefaultOptions(input) {\r\n        // Проверяем, что значение input не пустое\r\n        // Получаем атрибуты input\r\n        const inputAttributes = [...input.attributes];\r\n\r\n        // Создаем элемент option\r\n        let option = document.createElement('option');\r\n\r\n        // Получаем текстовое содержимое метки для этой опции\r\n        let textContent = input.parentElement.querySelector('.select-content__radio').textContent.trim();\r\n\r\n        // Устанавливаем атрибуты элемента option на основе атрибутов input\r\n        inputAttributes.forEach(attribute => {\r\n            let name = attribute.name;\r\n\r\n            // Исключаем атрибуты 'type' и 'name'\r\n            if (name !== 'type' && name !== 'name' && name !== 'checked') {\r\n                option.setAttribute(name, attribute.value);\r\n            }\r\n\r\n            if (name === 'checked') {\r\n                option.setAttribute('selected', 'selected')\r\n                option.selected = true;\r\n            }\r\n        });\r\n\r\n        let optionClasses = Array.from(input.classList);\r\n        optionClasses.forEach(className => option.classList.add(className));\r\n\r\n        // Устанавливаем текстовое содержимое опции\r\n        option.textContent = textContent;\r\n\r\n        return option;\r\n    }\r\n}\r\n;\r\n/**\r\n * Проверка валидности значения имени в поле формы.\r\n * @param {HTMLElement} el - Элемент формы, содержащий значение.\r\n * @param {boolean} [isRequired=false] - Флаг, указывающий, является ли электронная почта обязательным полем.\r\n * @returns {Object} - Объект с элементом и флагом результата валидации.\r\n */\r\nfunction formNameValid(el, isRequired = false) {\r\n    // Получаем длину значения в поле\r\n    let l = el.value.length;\r\n    let elCheck = true;\r\n\r\n    if (isRequired) {\r\n        if (l === 0) {\r\n            elCheck = false;\r\n            el.classList.add('validate'); // Добавляем класс для стилизации невалидного поля\r\n            el.parentElement.querySelector('.msg').style.display = 'none'; // Скрываем сообщение об успешной валидации\r\n            el.parentElement.querySelector('.msg-error').style.display = 'block'; // Показываем сообщение об ошибке: поле обязательно для заполнения\r\n        } else if (l !== 0 && l < 2) {\r\n            elCheck = false;\r\n            el.parentElement.querySelector('.msg').style.display = 'none'; // Скрываем сообщение об успешной валидации\r\n            el.parentElement.querySelector('.msg-empty').style.display = 'block'; // Показываем сообщение об ошибке: значение слишком короткое\r\n            el.classList.add('validate'); // Добавляем класс для стилизации невалидного поля\r\n        } else {\r\n            elCheck = true;\r\n            el.classList.remove('validate'); // Удаляем класс для стилизации невалидного поля\r\n            el.parentElement.querySelector('.msg').style.display = 'none'; // Скрываем сообщение об успешной валидации\r\n        }\r\n    }\r\n\r\n    return {el, elCheck, value: el.value}; // Возвращаем результат проверки валидности значения в поле формы\r\n}\r\n\r\n/**\r\n * Функция для валидации поля ввода телефонного номера.\r\n * @param {HTMLElement} el - Элемент поля ввода.\r\n * @param {boolean} [isRequired=false] - Флаг, указывающий, является ли электронная почта обязательным полем.\r\n * @returns {Object} - Объект с элементом и флагом результата валидации.\r\n */\r\nfunction formPhoneValid(el, isRequired = false) {\r\n    // Регулярное выражение для проверки наличия цифр в строке\r\n    var validPhone = /\\d/;\r\n    // Получаем длину значения в поле ввода\r\n    var l = el.value.length;\r\n    let elCheck = true;\r\n\r\n    if (isRequired) {\r\n        // Проверка на пустое значение\r\n        if (l === 0) {\r\n            elCheck = false;\r\n            el.classList.add('validate');\r\n            el.parentElement.querySelector('.msg').style.display = 'none';\r\n            el.parentElement.querySelector('.msg-error').style.display = 'block';\r\n        } else {\r\n            // Если длина значения в поле ввода меньше 10 и больше 0\r\n            if (l < 10 && l > 0) {\r\n                elCheck = false;\r\n                el.classList.add('validate');\r\n                el.parentElement.querySelector('.msg').style.display = 'none';\r\n                el.parentElement.querySelector('.msg-empty').style.display = 'block';\r\n            } else {\r\n                elCheck = true;\r\n                el.classList.remove('validate');\r\n                el.parentElement.querySelector('.msg').style.display = 'none';\r\n            }\r\n        }\r\n    }3\r\n    return {el, elCheck, value: el.value};\r\n} // конец\r\n\r\n/**\r\n * Функция для валидации поля ввода электронной почты.\r\n * @param {HTMLElement} el - Элемент поля ввода.\r\n * @param {boolean} [isRequired=false] - Флаг, указывающий, является ли электронная почта обязательным полем.\r\n * @returns {Object} - Объект с элементом и флагом результата валидации.\r\n */\r\nfunction formEmailValid(el, isRequired = false) {\r\n    let elCheck;\r\n    var emailVal = el.value; // Получаем значение электронной почты из поля ввода\r\n    var emailValid = emailVal.split('@'); // Разбиваем значение на две части по символу '@'\r\n    var l = el.value.length; // Получаем длину значения в поле ввода\r\n\r\n    // Если электронная почта обязательна для заполнения\r\n    if (isRequired) {\r\n        if (l === 0) {\r\n            el.classList.add('validate');\r\n            el.parentElement.querySelector('.msg').style.display = 'none';\r\n            el.parentElement.querySelector('.msg-error').style.display = 'block';\r\n            elCheck = false;\r\n        } else {\r\n            if (l > 0 && (el.value.match(/.+?\\@.+\\.+/g) || []).length === 1) {\r\n                if (emailValid[0].length < 3) {\r\n                    el.classList.add('validate');\r\n                    el.parentElement.querySelector('.msg').style.display = 'none';\r\n                    el.parentElement.querySelector('.msg-error-length').style.display = 'block';\r\n                    elCheck = false;\r\n                } else {\r\n                    el.classList.remove('validate');\r\n                    el.parentElement.querySelector('.msg').style.display = 'none';\r\n                    elCheck = true;\r\n                }\r\n            } else {\r\n                el.classList.add('validate');\r\n                el.parentElement.querySelector('.msg').style.display = 'none';\r\n                el.parentElement.querySelector('.msg-empty').style.display = 'block';\r\n                elCheck = false;\r\n            }\r\n        }\r\n    } else {\r\n        // Если электронная почта необязательна для заполнения\r\n        if (l > 0) {\r\n            if (l > 0 && (el.value.match(/.+?\\@.+\\.+/g) || []).length === 1) {\r\n                if (emailValid[0].length < 3) {\r\n                    el.classList.add('validate');\r\n                    el.parentElement.querySelector('.msg').style.display = 'none';\r\n                    el.parentElement.querySelector('.msg-error-length').style.display = 'block';\r\n                    elCheck = false;\r\n                } else {\r\n                    el.classList.remove('validate');\r\n                    el.parentElement.querySelector('.msg').style.display = 'none';\r\n                    elCheck = true;\r\n                }\r\n            } else {\r\n                el.classList.add('validate-border');\r\n                el.parentElement.querySelector('.msg').style.display = 'none';\r\n                el.parentElement.querySelector('.msg-error-email').style.display = 'block';\r\n                elCheck = false;\r\n            }\r\n        } else {\r\n            elCheck = true;\r\n        }\r\n    }\r\n\r\n    return {el, elCheck, value: el.value};\r\n} // конец\r\n\r\n/**\r\n * Функция для валидации поля ввода индекса.\r\n * @param {HTMLElement} el - Элемент поля ввода.\r\n * @param {boolean} [isRequired=false] - Флаг, указывающий, является ли электронная почта обязательным полем.\r\n * @returns {Object} - Объект с элементом и флагом результата валидации.\r\n */\r\nfunction formIndexValid(el, isRequired = false) {\r\n    let elCheck = true;\r\n    // Получаем длину значения в поле ввода\r\n    let l = el.value.length;\r\n\r\n    if (isRequired) {\r\n        // Проверяем, не пустое ли значение\r\n        if (l === 0) {\r\n            elCheck = false;\r\n            el.classList.add('validate');\r\n            el.parentElement.querySelector('.msg').style.display = 'none';\r\n            el.parentElement.querySelector('.msg-error').style.display = 'block';\r\n        } else if (l !== 0 && l < 6) { // Если значение не пустое, но длина меньше 6 символов\r\n            elCheck = false;\r\n            el.parentElement.querySelector('.msg').style.display = 'none';\r\n            el.parentElement.querySelector('.msg-empty').style.display = 'block';\r\n            el.classList.add('validate');\r\n        } else {\r\n            // Валидация пройдена\r\n            elCheck = true;\r\n            el.classList.remove('validate');\r\n            el.parentElement.querySelector('.msg').style.display = 'none';\r\n        }\r\n    }\r\n\r\n\r\n    return {el, elCheck, value: el.value};\r\n} // конец\r\n\r\n/**\r\n * Функция для валидации поля ввода адреса.\r\n * @param {HTMLElement} el - Элемент поля ввода.\r\n * @param {boolean} [isRequired=false] - Флаг, указывающий, является ли электронная почта обязательным полем.\r\n * @returns {Object} - Объект с элементом и флагом результата валидации.\r\n */\r\nfunction formAddressValid(el, isRequired = false) {\r\n    let elCheck = true;\r\n    // Получаем длину значения в поле ввода\r\n    let l = el.value.length;\r\n\r\n    if (isRequired) {\r\n        // Проверяем, не пустое ли значение\r\n        if (l === 0) {\r\n            elCheck = false;\r\n            el.classList.add('validate');\r\n            el.parentElement.querySelector('.msg').style.display = 'none';\r\n            el.parentElement.querySelector('.msg-error').style.display = 'block';\r\n        } else {\r\n            // Валидация пройдена\r\n            elCheck = true;\r\n            el.classList.remove('validate');\r\n            el.parentElement.querySelector('.msg').style.display = 'none';\r\n        }\r\n    }\r\n\r\n    return {el, elCheck, value: el.value};\r\n} // конец\r\n\r\n/**\r\n * Функция для валидации кастомного выпадающего списка.\r\n * @param {HTMLElement} el - Элемент кастомного выпадающего списка.\r\n * @param {boolean} isRequired - Флаг, указывающий, является ли заполнение списка обязательным.\r\n * @returns {Object} - Объект с элементом и флагом результата валидации.\r\n */\r\nfunction formCustomSelectValid(el, isRequired = false) {\r\n    let elCheck = true;\r\n    let value = '';\r\n    // Проверяем, является ли заполнение списка обязательным\r\n    if (isRequired) {\r\n        let parent = el.closest('.select-wrapper') || false; // Получаем родительский элемент списка\r\n        let title = el.querySelector('.select-title'); // Получаем заголовок списка\r\n        let inputs = el.querySelectorAll('input[type=\"radio\"]'); // Получаем все радио-кнопки в списке\r\n        let messages = parent ? parent.querySelectorAll('.msg') : {};\r\n\r\n        // Перебираем все радио-кнопки в списке\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n\r\n            if (input.checked && input.value !== '') {\r\n                value = input.value;\r\n                // Если хотя бы одна кнопка выбрана, считаем список валидным\r\n                elCheck = true;\r\n                // Убираем стиль валидации у заголовка\r\n                title.classList.remove('validate');\r\n                // Скрываем все сообщения об ошибках\r\n                if (messages.length > 0) {\r\n                    parent.querySelectorAll('.msg').forEach(item => item.style.display = 'none');\r\n                }\r\n\r\n                break;\r\n            } else {\r\n                // Если ни одна кнопка не выбрана, считаем список невалидным\r\n                elCheck = false;\r\n\r\n                // Добавляем стиль валидации к заголовку\r\n                title.classList.add('validate');\r\n                // Отображаем сообщение об ошибке\r\n                if (messages.length > 0) {\r\n                    parent.querySelector('.msg-error').style.display = 'block';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return {el, elCheck, value};\r\n}\r\n\r\n/**\r\n * Проверяет валидность текстового поля.\r\n *\r\n * @param {HTMLElement} el Элемент textarea для проверки.\r\n * @param {boolean} isRequired Флаг, указывающий, является ли поле обязательным для заполнения (по умолчанию false).\r\n * @param {number} maxLength Максимальная длина текста в поле (по умолчанию 100).\r\n * @returns {object} Объект с элементом textarea и флагом валидности.\r\n */\r\nfunction formTextareaValid(el, isRequired = false, maxLength = 100) {\r\n    let elCheck = true;\r\n\r\n    if (isRequired) {\r\n        let l = el.value.length; // Получаем длину текста в поле ввода\r\n\r\n        // Если поле ввода пустое\r\n        if (l === 0) {\r\n            elCheck = false;\r\n            el.classList.add('validate');\r\n            el.parentElement.querySelector('.msg').style.display = 'none';\r\n            el.parentElement.querySelector('.msg-error').style.display = 'block';\r\n        } else if (l !== 0 && l < maxLength) {\r\n            // Если длина текста меньше максимальной длины\r\n            elCheck = false;\r\n            el.parentElement.querySelector('.msg').style.display = 'none';\r\n            el.parentElement.querySelector('.msg-empty').style.display = 'block';\r\n            el.classList.add('validate');\r\n        } else {\r\n            // Если длина текста соответствует или превышает максимальную длину\r\n            elCheck = true;\r\n            el.classList.remove('validate');\r\n            el.parentElement.querySelector('.msg').style.display = 'none';\r\n        }\r\n    }\r\n\r\n    // Возвращаем объект с элементом textarea и флагом валидности\r\n    return {el, elCheck, value: el.value};\r\n}\r\n\r\n/**\r\n * Функция для валидации чекбокса.\r\n * @param {HTMLElement} el - Элемент чекбокса.\r\n * @param {boolean} [isRequired=false] - Флаг, указывающий, является ли чекбокс обязательным для выбора.\r\n * @returns {Object} - Объект с элементом и флагом результата валидации.\r\n */\r\nfunction checkboxValid(el, isRequired = false) {\r\n    let elCheck = true;\r\n    // Убираем класс \"not-checked\" у родительского элемента\r\n    el.classList.remove('not-checked');\r\n\r\n    // Проверяем, является ли выбор чекбокса обязательным\r\n    if (isRequired) {\r\n        if (el.checked) {\r\n            // Если чекбокс выбран, считаем его валидным\r\n            elCheck = true;\r\n            // Убираем класс \"not-checked\" у родительского элемента\r\n            el.classList.remove('not-checked');\r\n        } else {\r\n            // Если чекбокс не выбран, считаем его невалидным\r\n            elCheck = false;\r\n            // Добавляем класс \"not-checked\" к родительскому элементу\r\n            el.classList.add('not-checked');\r\n        }\r\n    }\r\n\r\n    return {el, elCheck, value: el.value};\r\n}\r\n\r\n/**\r\n * Функция для валидации поля ввода промокода.\r\n * @param {HTMLElement} el - Элемент поля ввода промокода.\r\n * @param {boolean} isRequired - Флаг, указывающий, является ли поле обязательным для заполнения (по умолчанию false).\r\n * @returns {boolean} - Результат валидации поля.\r\n */\r\nfunction formPromocodeValid(el, isRequired = false) {\r\n    let elCheck = true; // Переменная для хранения результата валидации\r\n    let l = el.value.length; // Длина значения в поле ввода\r\n\r\n    if (isRequired) {\r\n        // Проверка длины значения в поле ввода\r\n        if (l > 0) {\r\n            // Если длина значения больше 0\r\n\r\n            // Проверка на наличие атрибута readOnly у элемента\r\n            if (el.getAttribute('readonly') !== null) {\r\n                // Если атрибут readOnly присутствует\r\n\r\n                elCheck = true; // Установка результата валидации в true\r\n                el.parentElement.querySelector('.msg').style.display = 'none'; // Скрытие сообщения об ошибке\r\n                el.classList.remove('validate'); // Удаление класса \"validate\" у поля ввода\r\n            } else {\r\n                // Если атрибут readOnly отсутствует\r\n\r\n                elCheck = false; // Установка результата валидации в false\r\n                el.classList.add('validate'); // Добавление класса \"validate\" к полю ввода\r\n                el.parentElement.querySelector('.msg').style.display = 'none'; // Скрытие сообщения об успешном применении промокода\r\n                el.parentElement.querySelector('.msg-error-not-apply').style.display = 'block'; // Отображение сообщения об ошибке применения промокода\r\n            }\r\n        } else {\r\n            // Если длина значения равна 0\r\n\r\n            elCheck = true; // Установка результата валидации в true\r\n            el.classList.remove('validate'); // Удаление класса \"validate\" у поля ввода\r\n            el.parentElement.querySelector('.msg').style.display = 'none'; // Скрытие сообщения об ошибке\r\n        }\r\n    }\r\n\r\n    return {el, elCheck, value: el.value}; // Возвращение результата валидации\r\n}\r\n\r\n;\r\nclass Accordion {\r\n    constructor(selector, multiple) {\r\n        this.el = document.querySelector(selector);\r\n        this.multiple = multiple;\r\n        this.bindEvents();\r\n    }\r\n\r\n    bindEvents() {\r\n        const headings = this.el.querySelectorAll('.heading');\r\n        headings.forEach(heading => {\r\n            heading.addEventListener('click', () => {\r\n                const parent = heading.parentElement;\r\n\r\n                if (!this.multiple) {\r\n                    this.closeOthers(parent);\r\n                }\r\n\r\n                if (parent.classList.contains('open')) {\r\n                    this.close(parent);\r\n                } else {\r\n                    this.open(parent);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    open(element) {\r\n        element.classList.add('open');\r\n        // CSS транзиции обрабатывают изменения, поэтому JavaScript здесь изменяет только классы\r\n    }\r\n\r\n    close(element) {\r\n        element.classList.remove('open');\r\n        // Аналогично, плавное закрытие обрабатывается через CSS\r\n    }\r\n\r\n    closeOthers(currentElement) {\r\n        // Закрываем все аккордеоны, кроме текущего\r\n        const allElements = this.el.querySelectorAll('.accordion-item');\r\n        allElements.forEach(element => {\r\n            if (element !== currentElement) {\r\n                this.close(element);\r\n            }\r\n        });\r\n    }\r\n}\r\n;\r\n;\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n\r\n    // Получаем основной элемент body\r\n    const mainBody = document.querySelector('body');\r\n// Получаем высоту заголовка\r\n    const header = document.getElementById('header');\r\n// Получаем высоту подвала\r\n    const footer = document.querySelector('footer');\r\n// Получаем основной элемент main\r\n    const main = document.querySelector('main');\r\n    const desktop = 1201;\r\n    const laptop = 1200.98;\r\n    const tablet = 1029.98;\r\n    const mobile = 807.98;\r\n    const fullMobile = 575.98;\r\n    const clientWidth = document.documentElement.clientWidth;\r\n    const contentWrapWidth = calculateDynamicValue({\r\n        desktop: 1160,\r\n        laptop: 990,\r\n        tablet: 740,\r\n        mobile: clientWidth - 20\r\n    });\r\n\r\n    /**\r\n     * Рассчитывает динамическое значение в зависимости от переданных параметров и ширины окна браузера.\r\n     * @param {Object} values - Объект с значениями для разных ширин экрана.\r\n     * @param {number} values.desktop - Значение для ширины экрана больше 1201 пикселя.\r\n     * @param {number} values.laptop - Значение для ширины экрана между 1200 и 1029 пикселями.\r\n     * @param {number} values.tablet - Значение для ширины экрана между 1029 и 807 пикселями.\r\n     * @param {number} values.mobile - Значение для ширины экрана менее 807 пикселей.\r\n     * @returns {*} - Рассчитанное динамическое значение.\r\n     */\r\n\r\n    function calculateDynamicValue(values) {\r\n        let value;\r\n\r\n        if (clientWidth > desktop) {\r\n            value = values['desktop'];\r\n        } else if (clientWidth >= tablet && clientWidth < laptop) {\r\n            value = values['laptop'];\r\n        } else if (clientWidth >= mobile && clientWidth < tablet) {\r\n            value = values['tablet'];\r\n        } else if (clientWidth < mobile) {\r\n            value = values['mobile']\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n// Растягиваем основной элемент main между заголовком и подвалом\r\n    const headerHeight = header.offsetHeight; // Получаем высоту заголовка\r\n    const footerHeight = footer.offsetHeight; // Получаем высоту подвала\r\n    main.style.minHeight = `calc(100vh - (${headerHeight}px + ${footerHeight}px))`; // Устанавливаем минимальную высоту основного элемента main\r\n\r\n    // плавная прокуртка\r\n// Функция для плавной прокрутки к якорю\r\nfunction smoothScroll(e) {\r\n    e.preventDefault(); // Отменяем стандартное поведение ссылки\r\n    // Получаем ID якоря из атрибута data-href или href\r\n    const targetId = this.getAttribute('data-href') || this.getAttribute('href');\r\n    // Находим элемент с нужным ID\r\n    const targetElement = document.querySelector(targetId);\r\n    const duration = 1000; // Длительность анимации прокрутки (в миллисекундах)\r\n    if (targetElement) { // Проверяем, найден ли элемент с нужным ID\r\n        const targetOffsetTop = targetElement.offsetTop; // Получаем вертикальное смещение элемента относительно верхнего края страницы\r\n        // Прокручиваем страницу до элемента с плавной анимацией\r\n        window.scrollTo({\r\n            top: targetOffsetTop,\r\n            behavior: 'smooth' // Опция для плавной прокрутки\r\n        });\r\n    }\r\n}\r\n\r\n// Получаем все ссылки, которые начинаются с \"#\" или имеют атрибут data-href, начинающийся с \"#\"\r\nconst links = document.querySelectorAll('a[href^=\"#\"],*[data-href^=\"#\"]');\r\n// Перебираем все найденные ссылки и назначаем им обработчик события клика для плавной прокрутки\r\nlinks.forEach(link => {\r\n    link.addEventListener('click', smoothScroll);\r\n});\r\n;\r\n\r\n    // модальные окна\r\nclass HandlerForm {\r\n\r\n    constructor(form) {\r\n        this.form = form.classList.contains('not-valid') ? null : form;\r\n        this.validationFunctions = { // Объект с функциями валидации для различных типов полей\r\n            name: formNameValid,\r\n            phone: formPhoneValid,\r\n            email: formEmailValid,\r\n            index: formIndexValid,\r\n            address: formAddressValid,\r\n            agreement: checkboxValid,\r\n            textarea: formTextareaValid,\r\n            promo: formPromocodeValid,\r\n            selects: formCustomSelectValid\r\n        };\r\n        this.excludeFields = ['selects', 'inputs', 'submit', 'promoDelete', 'promoApply', 'textarea', 'agreement', 'subscribing'];\r\n        this.checkboxFields = ['subscribing', 'agreement'];\r\n\r\n        if (this.form === null) {\r\n            return\r\n        }\r\n\r\n        this.fields = this.formFields(form);\r\n\r\n        this.init(this.form);\r\n    }\r\n\r\n    init(form) {\r\n        form.reset();\r\n\r\n        if (!form.classList.contains('on-validate')) {\r\n            const fields = this.fields;\r\n            const submit = fields.submit;\r\n\r\n            this.validateFields(fields, this.fieldAddHandle);\r\n            // Удаляем все существующие обработчики события click\r\n            submit.onclick = null;\r\n\r\n            submit.onclick = (event => this.submitHandler(event, form, fields));\r\n            form.classList.add('on-validate');\r\n        }\r\n    }\r\n\r\n    submitHandler(event, form, fields) {\r\n        event.preventDefault();\r\n        this.formSubmit(form, fields);\r\n    }\r\n\r\n    formFields(form) {\r\n        const fields = {};\r\n\r\n        // Функция для добавления поля, если элемент существует\r\n        const addFieldIfExist = (name, selector) => {\r\n            const element = form.querySelector(selector);\r\n            if (element) {\r\n                fields[name] = element;\r\n            }\r\n        };\r\n\r\n        // Добавление полей с проверкой существования элемента\r\n        addFieldIfExist('name', '.input-name');\r\n        addFieldIfExist('phone', '.input-phone');\r\n        addFieldIfExist('email', '.input-email');\r\n        addFieldIfExist('index', '.input-index');\r\n        addFieldIfExist('address', '.input-address');\r\n        addFieldIfExist('promo', '.input-promocode');\r\n        addFieldIfExist('agreement', 'input[type=\"checkbox\"][name=\"agreement\"]');\r\n        addFieldIfExist('subscribing', 'input[type=\"checkbox\"][name=\"permission_mailing\"]');\r\n        addFieldIfExist('promoApply', '.promocode__btn_apply');\r\n        addFieldIfExist('promoDelete', '.promocode__btn_delete');\r\n        addFieldIfExist('textarea', 'textarea');\r\n        addFieldIfExist('submit', 'input[type=\"submit\"]');\r\n        addFieldIfExist('submit', 'button[type=\"submit\"]');\r\n\r\n        fields.inputs = form.querySelectorAll('input:not([type=\"submit\"]):not([type=\"hidden\"]):not([type=\"radio\"]):not([type=\"checkbox\"]), textarea');\r\n        fields.selects = form.querySelectorAll('.custom-select');\r\n\r\n        return fields;\r\n    }\r\n\r\n    /**\r\n     * Функция для валидации полей формы.\r\n     * @param {Object} fields - Объект, содержащий поля формы.\r\n     * @param {Function} handler - Функция, добавляющая события валидации для полей\r\n     * @returns {Object} - Объект с результатами валидации полей формы.\r\n     */\r\n    validateFields(fields, handler) {\r\n        const excludeFields = this.excludeFields;\r\n        const checkboxFields = this.checkboxFields;\r\n        const validationResult = {};\r\n\r\n        // Валидация полей при потере фокуса\r\n        for (const key in fields) {\r\n            const field = fields[key];\r\n            const validate = this.validationFunctions[key] || new Function(); // Функция валидации для данного поля или пустая строка\r\n            let result = undefined;\r\n\r\n            const props = {\r\n                listener: 'blur',\r\n                field: field,\r\n                validate: validate,\r\n                isMessage: false,\r\n                messageLength: 100,\r\n                isSelect: false\r\n            };\r\n\r\n            // Обработка исключений и применение валидации для полей\r\n            if (!excludeFields.includes(key)) {\r\n                result = handler(props)\r\n            }\r\n\r\n            if (checkboxFields.includes(key)) {\r\n                props.listener = 'change';\r\n                result = handler(props)\r\n            }\r\n\r\n            if (key === 'textarea') {\r\n                props.isMessage = true;\r\n                result = handler(props)\r\n            }\r\n\r\n            if (key === 'selects' && field.length > 0) {\r\n                props.isSelect = true;\r\n                result = handler(props)\r\n            }\r\n\r\n            if (typeof result !== 'undefined') {\r\n                Object.assign(validationResult, result);\r\n            }\r\n        }\r\n\r\n        return validationResult;\r\n    }\r\n\r\n    /**\r\n     * Функция для обработки события потери фокуса поля или при изменении поля.\r\n     * @param {Object} props - Объект с параметрами для обработчика.\r\n     * @param {string} props.listener - Строка, определяющая тип события, на которое нужно реагировать (например, 'blur' или 'change').\r\n     * @param {HTMLElement | NodeList} props.field - HTML-элемент или коллекция элементов, на которые назначается обработчик события.\r\n     * @param {Function} props.validate - Функция для валидации поля. Принимает поле и опциональные параметры валидации.\r\n     * @param {boolean} [props.isMessage=false] - Флаг, определяющий, нужно ли выводить сообщение об ошибке для поля.\r\n     * @param {number} [props.messageLength=100] - Длина сообщения об ошибке (если применяется).\r\n     * @param {boolean} [props.isSelect=false] - Флаг, указывающий, что поле является выпадающим списком (select).\r\n     */\r\n    fieldAddHandle(props) {\r\n        const {listener, field, validate, isMessage = false, messageLength = 100, isSelect = false} = props;\r\n\r\n        if (isSelect) {\r\n            field.forEach(select => {\r\n                const isCustom = select.classList.contains('custom-select');\r\n                const isRequired = isCustom ? select.classList.contains('required') : select.reqiured;\r\n\r\n                if (isCustom) {\r\n                    const options = select.querySelectorAll('.select-content__wrapper');\r\n                    options.forEach(option => {\r\n                        option.addEventListener('click', event => {\r\n                            validate(select, isRequired);\r\n                        })\r\n                    })\r\n                }\r\n            });\r\n        } else {\r\n            field.addEventListener(listener, event => {\r\n                const isRequired = field.classList.contains('required');\r\n\r\n                if (isMessage) {\r\n                    validate(field, isRequired, messageLength);\r\n                } else {\r\n                    validate(field, isRequired);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Функция для обработки события потери фокуса поля или при изменении поля.\r\n     * @param {Object} props - Объект с параметрами для обработчика.\r\n     * @param {HTMLElement | NodeList} props.field - HTML-элемент или коллекция элементов, на которые назначается обработчик события.\r\n     * @param {Function} props.validate - Функция для валидации поля. Принимает поле и опциональные параметры валидации.\r\n     * @param {boolean} [props.isMessage=false] - Флаг, определяющий, что это поле с сообщением (textarea).\r\n     * @param {number} [props.messageLength=100] - Длина сообщения (если применяется).\r\n     * @param {boolean} [props.isSelect=false] - Флаг, указывающий, что поле является выпадающим списком (select).\r\n     */\r\n    fieldCheckValidation(props) {\r\n        const {listener, field, validate, isMessage = false, messageLength = 100, isSelect = false} = props;\r\n        const validationResult = {};\r\n        // console.log(isSelect)\r\n        if (isSelect) {\r\n            field.forEach(select => {\r\n                const isCustom = select.classList.contains('custom-select');\r\n                const isRequired = isCustom ? select.classList.contains('required') : select.reqiured;\r\n\r\n                if (isCustom) {\r\n                    const option = select.querySelector('input');\r\n                    const selectName = option.name;\r\n\r\n                    validationResult[selectName] = validate(select, isRequired);\r\n                }\r\n            });\r\n        } else {\r\n            const isRequired = field.classList.contains('required');\r\n            const fieldName = field.name;\r\n            if (isMessage) {\r\n                validationResult[fieldName] = validate(field, isRequired, messageLength);\r\n            } else {\r\n                validationResult[fieldName] = validate(field, isRequired);\r\n            }\r\n        }\r\n        return validationResult;\r\n    }\r\n\r\n    formSubmit(form, fields) {\r\n        // const validation = this.validateFields(fields, this.fieldCheckValidation);\r\n        const validation = this.validateFields(fields, this.fieldCheckValidation);\r\n        const validationErrors = this.validationErrors(validation);\r\n        const fieldsValues = this.getFieldsValues(validation)\r\n\r\n        if (JSON.stringify(validationErrors) !== '{}') {\r\n            return;\r\n        }\r\n\r\n        new FormSender(this.form, fieldsValues);\r\n    }\r\n\r\n    validationErrors(fields) {\r\n        const checkValues = {};\r\n\r\n        for (let key in fields) {\r\n            const field = fields[key];\r\n            // Проверяем, содержит ли ключ подстроку \"Check\"\r\n            if ('elCheck' in field && !field.elCheck) {\r\n                // Если да, сохраняем значение в объекте проверок валидации\r\n                checkValues[key] = field.elCheck;\r\n            }\r\n        }\r\n\r\n        return checkValues;\r\n    }\r\n\r\n    getFieldsValues(fields) {\r\n        const values = {};\r\n\r\n        for (let key in fields) {\r\n            const field = fields[key];\r\n            if ('value' in field) {\r\n                values[key] = field.value;\r\n            }\r\n        }\r\n\r\n        return values;\r\n    }\r\n}\r\n\r\n/**\r\n * Создает экземпляр класса для обработки отправки формы.\r\n * @param {HTMLElement} form - HTML-элемент формы.\r\n * @param {object} data - Данные для отправки с формой.\r\n */\r\nclass FormHandler {\r\n    constructor(form, data) {\r\n        this.form = form; // HTML-элемент формы\r\n        this.data = data; // Данные для отправки с формой\r\n\r\n        // Инициализация обработчика формы\r\n        this.init(this.form);\r\n    }\r\n\r\n    /**\r\n     * Инициализирует обработчик формы в зависимости от ее идентификатора.\r\n     * @param {HTMLElement} form - HTML-элемент формы.\r\n     */\r\n    init(form) {\r\n        // Создание объекта с параметрами для отправки запроса\r\n        const props = {\r\n            url: americano.ajaxurl, // URL для отправки запроса\r\n            data: this.data, // Данные для отправки с формой\r\n            form: form // HTML-элемент формы\r\n        };\r\n\r\n        // Определение действий в зависимости от идентификатора формы\r\n        switch (form.id) {\r\n            case 'booking_form':\r\n                props.action = 'booking'; // Установка действия для формы\r\n                props.showDescription = true; // Показывать описание модального окна\r\n                // Получение функций обратного вызова для обработки результатов отправки формы бронирования\r\n                Object.assign(props, this.bookingForm());\r\n                // Отправка формы методом POST с использованием функций обратного вызова\r\n                this.sendFormPost(props);\r\n                break;\r\n\r\n            case 'order_form':\r\n                props.action = 'create_order'; // Установка действия для формы\r\n                props.showDescription = props.data.callback; // Показывать описание модального окна\r\n                // Получение функций обратного вызова для обработки результатов отправки формы бронирования\r\n                Object.assign(props, this.orderForm());\r\n                // Отправка формы методом POST с использованием функций обратного вызова\r\n                this.sendFormPost(props);\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Создает объект с функциями обратного вызова для обработки результатов отправки формы.\r\n     * @returns {object} - Объект с функциями обратного вызова.\r\n     */\r\n    orderForm() {\r\n        /**\r\n         * Функция вызывается перед отправкой запроса и добавляет класс 'loader' к элементу body для отображения индикатора загрузки.\r\n         */\r\n        const beforeSend = () => document.body.classList.add('loader');\r\n\r\n        /**\r\n         * Функция вызывается при успешном ответе от сервера и обрабатывает полученные данные.\r\n         * @param {object} response - Ответ от сервера.\r\n         * @param {HTMLElement} form - Форма, связанная с запросом.\r\n         * @param {boolean} [showDescription=false] - Флаг, указывающий, нужно ли отображать описание модального окна.\r\n         */\r\n        const success = (response, form, showDescription = false) => {\r\n            console.log(response);\r\n            // Сопоставляем статус ответа с идентификатором модального окна\r\n            const modalIds = {\r\n                success: 'modal_success_order',\r\n                error: 'modal_error',\r\n            };\r\n            // Получаем идентификатор модального окна для текущего статуса ответа\r\n            const modalId = modalIds[response.status] || 'modal_error';\r\n\r\n            // Находим модальное окно по его идентификатору\r\n            const modal = document.getElementById(modalId);\r\n\r\n            // Показываем модальное окно и устанавливаем ему непрозрачность\r\n            modal.style.display = 'block';\r\n            modal.style.opacity = 1;\r\n\r\n            // Если установлен флаг showDescription, отображаем описание модального окна\r\n            if (showDescription) {\r\n                modal.querySelector('.modal__description .shower-desc').style.display = 'flex';\r\n            } else {\r\n                modal.querySelector('.modal__description .shower-desc').style.display = 'none';\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Функция вызывается при возникновении ошибки во время запроса и обрабатывает ошибку.\r\n         * @param {XMLHttpRequest} xhr - Объект XMLHttpRequest, содержащий информацию о запросе.\r\n         * @param {string} exception - Строка, содержащая описание типа ошибки.\r\n         */\r\n        const onError = (xhr, exception) => this.ajaxErrors(xhr, exception);\r\n\r\n        /**\r\n         * Функция вызывается после завершения выполнения запроса и удаляет класс 'loader' у элемента body для скрытия индикатора загрузки.\r\n         */\r\n        const onComplete = () => document.body.classList.remove('loader');\r\n\r\n        // Возвращаем объект с функциями обратного вызова\r\n        return {beforeSend, success, onError, onComplete};\r\n    }\r\n\r\n    /**\r\n     * Создает объект с функциями обратного вызова для обработки результатов отправки формы.\r\n     * @returns {object} - Объект с функциями обратного вызова.\r\n     */\r\n    bookingForm() {\r\n        /**\r\n         * Функция вызывается перед отправкой запроса и добавляет класс 'loader' к элементу body для отображения индикатора загрузки.\r\n         */\r\n        const beforeSend = () => document.body.classList.add('loader');\r\n\r\n        /**\r\n         * Функция вызывается при успешном ответе от сервера и обрабатывает полученные данные.\r\n         * @param {object} response - Ответ от сервера.\r\n         * @param {HTMLElement} form - Форма, связанная с запросом.\r\n         * @param {boolean} [showDescription=false] - Флаг, указывающий, нужно ли отображать описание модального окна.\r\n         */\r\n        const success = (response, form, showDescription = false) => {\r\n            // console.log(response);\r\n            // Сопоставляем статус ответа с идентификатором модального окна\r\n            const modalIds = {\r\n                success: 'modal_success',\r\n                error: 'modal_error',\r\n            };\r\n            // Получаем идентификатор модального окна для текущего статуса ответа\r\n            const modalId = modalIds[response.status] || 'modal_error';\r\n\r\n            // Находим модальное окно по его идентификатору\r\n            const modal = document.getElementById(modalId);\r\n            // Находим текущее модальное окно, связанное с формой, и скрываем его\r\n            const currentModal = form.closest('.modal');\r\n            fadeOut(currentModal, 0);\r\n\r\n            // Показываем модальное окно и устанавливаем ему непрозрачность\r\n            modal.style.display = 'block';\r\n            modal.style.opacity = 1;\r\n\r\n            // Если установлен флаг showDescription, отображаем описание модального окна\r\n            if (showDescription) {\r\n                modal.querySelector('.modal__description').style.display = 'flex';\r\n            } else {\r\n                modal.querySelector('.modal__description').style.display = 'none';\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Функция вызывается при возникновении ошибки во время запроса и обрабатывает ошибку.\r\n         * @param {XMLHttpRequest} xhr - Объект XMLHttpRequest, содержащий информацию о запросе.\r\n         * @param {string} exception - Строка, содержащая описание типа ошибки.\r\n         */\r\n        const onError = (xhr, exception) => this.ajaxErrors(xhr, exception);\r\n\r\n        /**\r\n         * Функция вызывается после завершения выполнения запроса и удаляет класс 'loader' у элемента body для скрытия индикатора загрузки.\r\n         */\r\n        const onComplete = () => document.body.classList.remove('loader');\r\n\r\n        // Возвращаем объект с функциями обратного вызова\r\n        return {beforeSend, success, onError, onComplete};\r\n    }\r\n\r\n\r\n    /**\r\n     * Функция отправки POST запроса на сервер с использованием fetch.\r\n     * @param {object} props - Объект параметров запроса.\r\n     * @param {string} props.action - Действие, которое будет отправлено на сервер.\r\n     * @param {string} [props.url='https://jsonplaceholder.typicode.com/posts'] - URL, на который будет отправлен запрос.\r\n     * @param {object} [props.data={}] - Данные, которые будут отправлены на сервер.\r\n     * @param {function} [props.beforeSend=new Function()] - Функция, вызываемая перед отправкой запроса.\r\n     * @param {function} [props.success=new Function()] - Функция, вызываемая при успешном ответе от сервера.\r\n     * @param {function} [props.onError=new Function()] - Функция, вызываемая при возникновении ошибки во время запроса.\r\n     * @param {function} [props.onComplete=new Function()] - Функция, вызываемая после завершения запроса.\r\n     * @param {boolean} [props.showDescription=false] - Флаг, указывающий, нужно ли отображать описание запроса.\r\n     * @param {string} [props.form=''] - Форма, связанная с запросом.\r\n     */\r\n    sendFormPost(props) {\r\n        const {\r\n            action = '#',\r\n            url = 'https://jsonplaceholder.typicode.com/posts',\r\n            data = {},\r\n            beforeSend = new Function(),\r\n            success = new Function(),\r\n            onError = new Function(),\r\n            onComplete = new Function(),\r\n            showDescription = false,\r\n            form = ''\r\n        } = props;\r\n\r\n        // Формируем объект данных для отправки на сервер, включая действие (action), если оно указано\r\n        const requestData = {action, ...data};\r\n\r\n        // Создаем объект FormData и добавляем в него данные из requestData\r\n        const formData = new FormData();\r\n        for (const key in requestData) {\r\n            formData.append(key, requestData[key]);\r\n        }\r\n\r\n        // Параметры запроса\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            body: formData\r\n        };\r\n\r\n        // Вызываем функцию beforeSend перед отправкой запроса\r\n        beforeSend();\r\n\r\n        // Отправляем запрос с использованием fetch\r\n        fetch(url, requestOptions)\r\n            .then(response => {\r\n                // Проверяем, был ли успешный ответ от сервера\r\n                if (!response.ok) {\r\n                    // throw new Error('Network response was not ok');\r\n                    throw new Error('Нет соединения. Проверьте сеть.');\r\n                }\r\n                // Проверяем, что ответ не пустой\r\n                if (response.status === 204) {\r\n                    // Возвращаем пустой объект данных, если ответ пустой\r\n                    return {};\r\n                }\r\n                // console.log(response)\r\n                // Возвращаем JSON-представление ответа\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                // Вызываем функцию success при успешном ответе от сервера и передаем ей полученные данные\r\n                success(data, form, showDescription);\r\n            })\r\n            .catch(error => {\r\n                // Вызываем функцию onError при возникновении ошибки и передаем ей объект ошибки\r\n                onError(error);\r\n            })\r\n            .finally(() => {\r\n                // Вызываем функцию onComplete после завершения выполнения запроса\r\n                onComplete();\r\n            });\r\n    }\r\n\r\n    // обработка ошибок ajax\r\n    /**\r\n     * Функция для обработки ошибок при выполнении AJAX-запроса.\r\n     * @param {XMLHttpRequest} xhr - Объект XMLHttpRequest, содержащий информацию о запросе.\r\n     * @param {string} [exception=''] - Строка с описанием типа ошибки.\r\n     */\r\n    ajaxErrors(xhr, exception = '') {\r\n        // Вывод информации о запросе в консоль для отладки\r\n        console.log(xhr);\r\n\r\n        // Обработка различных типов ошибок\r\n        if (xhr.status === 0) {\r\n            // Ошибка при отсутствии соединения\r\n            console.error('Нет соединения. Проверьте сеть.');\r\n        } else if (xhr.status === 404) {\r\n            // Ошибка 404: страница не найдена\r\n            console.error('Запрошенная страница не найдена (404).');\r\n        } else if (xhr.status === 500) {\r\n            // Ошибка 500: внутренняя ошибка сервера\r\n            console.error('Внутренняя ошибка сервера (500).');\r\n        } else if (exception === 'parsererror') {\r\n            // Ошибка при синтаксическом анализе JSON\r\n            console.error('Не удалось выполнить запрошенный синтаксический анализ JSON. (parse failed)');\r\n        } else if (exception === 'timeout') {\r\n            // Превышен лимит времени ожидания запроса\r\n            console.error('Превышен лимит времени на запрос.');\r\n        } else if (exception === 'abort') {\r\n            // Запрос был прерван\r\n            console.error('Запрос прерван.');\r\n        } else {\r\n            // Обработка неопределенной ошибки\r\n            console.error('Неопределенная ошибка. ' + xhr.responseText);\r\n            console.error('Убрать с обработчика на бекенде все дебаги и повторить');\r\n        }\r\n    }\r\n}\r\n;\r\n\r\ndocument.addEventListener('click', function (e) {\r\n    const target = e.target;\r\n    const isOverlay = target.classList.contains('modal');\r\n    const isCloseButton = target.classList.contains('modal__close') || target.closest('.modal__close');\r\n    const button = target.classList.contains('btn') ? target : target.closest('.btn');\r\n    let modal;\r\n\r\n    if (isOverlay) {\r\n        modal = target;\r\n    }\r\n\r\n    if (isCloseButton) {\r\n        modal = target.closest('.modal');\r\n    }\r\n\r\n    if (modal) {\r\n        // modal.querySelector('.modal__content').classList.remove('animated');\r\n        fadeOut(modal, 215)\r\n        document.body.classList.remove('no-scroll');\r\n    }\r\n\r\n    if (button) {\r\n        const modalId = button.dataset.modal;\r\n\r\n        if (modalId) {\r\n            const modal = document.getElementById(modalId);\r\n            const form = modal.querySelector('form');\r\n            const selects = modal.querySelectorAll('.select');\r\n\r\n            modal.style.display = 'block';\r\n            modal.style.opacity = 1;\r\n            document.body.classList.add('no-scroll');\r\n\r\n            if (selects.length > 0) {\r\n                selects.forEach(select => {\r\n                    new CustomSelect('reinit', {\r\n                        selectElement: select\r\n                    })\r\n                })\r\n            }\r\n\r\n            if (form) {\r\n                new HandlerForm(form);\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n;\r\nconst hamburger = document.querySelector('.header__hamburger-wrap');\r\nconst hamburgerClose = document.querySelector('.hamburger__close');\r\n\r\nif (hamburger) {\r\n    hamburger.addEventListener('click', event => {\r\n        event.preventDefault();\r\n        const wrapper = document.querySelector('.hamburger-container');\r\n\r\n        document.body.classList.add('no-scroll');\r\n        wrapper.classList.remove('slideOutLeft')\r\n        wrapper.classList.add('slideInLeft')\r\n    });\r\n}\r\n\r\nif (hamburgerClose) {\r\n    hamburgerClose.addEventListener('click', event => {\r\n        event.preventDefault();\r\n        const wrapper = document.querySelector('.hamburger-container');\r\n\r\n        document.body.classList.remove('no-scroll');\r\n        wrapper.classList.remove('slideInLeft')\r\n        wrapper.classList.add('slideOutLeft')\r\n    });\r\n}\r\n;\r\n\r\n    function scrollMenu() {\r\n        const menu = document.querySelector('.menu');\r\n        if(menu) {\r\n            let container = menu.querySelector('.container');\r\n            let menuList = menu.querySelector('.nav-list');\r\n            let iconScroll = menu.querySelector('.menu__icon-scroll');\r\n            let containerWidth = container.clientWidth;\r\n            let menuListWidth = menuList.scrollWidth;\r\n\r\n            function showHideIcon(width, className) {\r\n                if (width <= menuListWidth) {\r\n                    iconScroll.classList.remove(className);\r\n                } else {\r\n                    iconScroll.classList.add(className);\r\n                }\r\n            }\r\n\r\n            let cartBtn = menu.querySelector('.menu__cart');\r\n            let cartBtnWidth = cartBtn.clientWidth;\r\n            let finalWidth = containerWidth - cartBtnWidth - 30;\r\n\r\n            showHideIcon(finalWidth, 'hide');\r\n            showHideIcon(containerWidth, 'hide-on-scroll');\r\n        }\r\n    }\r\n\r\n    scrollMenu();\r\n\r\n// плавающее меню\r\n    const getMenuOffsetTop = () => {\r\n        const menu = document.querySelector('.menu');\r\n        const menuH = menu.offsetHeight;\r\n        const header = document.querySelector('header');\r\n        const headerH = header.offsetHeight;\r\n        let menuOffsetTop;\r\n\r\n        if (menu.classList.contains('homepage_menu')) {\r\n            let hero = document.querySelector('.hero');\r\n\r\n            menuOffsetTop = headerH + hero.offsetHeight;\r\n        } else {\r\n            menuOffsetTop = headerH + menuH;\r\n        }\r\n\r\n        return menuOffsetTop;\r\n    }\r\n\r\n    function stickyMenu(item) {\r\n        let menu = document.querySelector('.menu');\r\n        let header = document.querySelector('#header');\r\n        let headerH = header.offsetHeight;\r\n        let height = headerH;\r\n        let backToTop = document.getElementById('back_to_top');\r\n\r\n\r\n        if (menu) {\r\n            let menuH = menu.offsetHeight;\r\n            height += menuH;\r\n\r\n            if (menu.classList.contains('homepage_menu')) {\r\n                height = menuH + getMenuOffsetTop();\r\n            }\r\n\r\n            if (!menu.classList.contains('is_not_first_scroll')) {\r\n                scrollMenu(menu);\r\n            }\r\n        }\r\n\r\n        if (item.pageYOffset > height) {\r\n            document.body.classList.add('nav_scroll');\r\n        } else {\r\n            document.body.classList.remove('nav_scroll');\r\n        }\r\n\r\n\r\n        if (item.pageYOffset > item.innerHeight) {\r\n            backToTop.style.display = 'flex';\r\n        } else {\r\n            backToTop.style.display = 'none';\r\n        }\r\n\r\n    }\r\n\r\n    stickyMenu(window);\r\n\r\n    window.addEventListener('scroll', function () {\r\n        stickyMenu(this);\r\n    });\r\n\r\n    const catalogLinks = document.querySelectorAll('.catalog-link')\r\n\r\n    if (catalogLinks.length > 0) {\r\n\r\n        catalogLinks.forEach(link => {\r\n            link.addEventListener('click', e => {\r\n                e.preventDefault();\r\n\r\n                window.scrollTo({\r\n                    top: getMenuOffsetTop(),\r\n                    behavior: 'smooth' // Опция для плавной прокрутки\r\n                });\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n// клик по мини корзине\r\n\r\n    document.querySelectorAll('.mini-cart').forEach(cart => {\r\n        cart.addEventListener('click', e => {\r\n            e.preventDefault();\r\n\r\n            if (cart.classList.contains('empty_mini-cart')) {\r\n                const modal = document.getElementById('modal_empty_cart');\r\n                modal.style.display = 'block';\r\n                modal.style.opacity = 1;\r\n            } else {\r\n                window.location.href = cart.href;\r\n            }\r\n        })\r\n    });\r\n\r\n// Обновление меню категорий на главной\r\n    if (document.body.classList.contains('home')) {\r\n\r\n        const navMenuItems = document.querySelectorAll('.nav-list li');\r\n\r\n        if (navMenuItems.length > 0) {\r\n            navMenuItems.forEach(function (item) {\r\n\r\n                item.addEventListener('click', function (e) {\r\n                    e.preventDefault();\r\n\r\n                    let itemLink = this.querySelector('a');\r\n                    let href = itemLink.getAttribute('href');\r\n                    let catName = itemLink.textContent;\r\n                    let urlGetParams = href.split('=');\r\n\r\n                    let data = {\r\n                        action: 'get_products_by_cat',\r\n                        slug: urlGetParams[1]\r\n                    }\r\n\r\n                    $.ajax({\r\n                        url: americano.ajaxurl,\r\n                        type: 'post',\r\n                        data: data,\r\n                        beforeSend: function (xhr) {\r\n                            document.body.classList.add('loader');\r\n                        },\r\n                        success: function (result) {\r\n                            // console.log(result);\r\n                            let catalogList = document.querySelector('.catalog__list');\r\n\r\n                            catalogList.innerHTML = result;\r\n                            document.querySelector('.catalog-section__title').textContent = catName;\r\n\r\n                        },\r\n                        complete: function () {\r\n                            document.body.classList.remove('loader');\r\n\r\n                            window.scrollTo({\r\n                                top: getMenuOffsetTop(),\r\n                                behavior: 'smooth' // Опция для плавной прокрутки\r\n                            });\r\n\r\n                            navMenuItems.forEach(item => item.classList.remove('active'));\r\n                            item.classList.add('active');\r\n\r\n                            history.replaceState(null, null, href);\r\n\r\n                            if (itemLink.closest('.hamburger')) {\r\n                                const wrapper = document.querySelector('.hamburger-container');\r\n\r\n                                document.body.classList.remove('no-scroll');\r\n                                wrapper.classList.remove('slideInLeft');\r\n                                wrapper.classList.add('slideOutLeft');\r\n                            }\r\n\r\n                        }\r\n                    });\r\n\r\n                });\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * инициализация аккордеона\r\n     */\r\n\r\n    const myAccordion = new Accordion('.accordion', false);\r\n\r\n    /**\r\n     * инициализация масок\r\n     */\r\n    \r\n// $('.input-email').inputmask({\r\n//     mask: '*{1,20}[.*{1,20}][.*{1,20}][.*{1,20}]@*{1,20}[.*{2,6}][.*{1,2}]',\r\n//     greedy: false,\r\n//     onBeforePaste: function (pastedValue, opts) {\r\n//         pastedValue = pastedValue.toLowerCase();\r\n//         return pastedValue.replace('mailto:', '');\r\n//     },\r\n//     definitions: {\r\n//         '*': {\r\n//             validator: \"[0-9A-Za-z!#$%&'*+/=?^_`{|}~\\-]\",\r\n//             casing: 'lower'\r\n//         }\r\n//     }\r\n// });\r\n\r\nconst inputsPhone = document.querySelectorAll('.input-phone');\r\nconst inputsEmail = document.querySelectorAll('.input-email');\r\n\r\nif (inputsPhone.length > 0) {\r\n\r\n    inputsPhone.forEach(function (input) {\r\n        let phoneMask = IMask(input, {\r\n            mask: '+7 (000) 000-00-00'\r\n        });\r\n    });\r\n}\r\n\r\nif (inputsEmail.length > 0) {\r\n\r\n    inputsEmail.forEach(function (input) {\r\n        var emailMask = IMask(input, {\r\n            mask: /^\\S*@?\\S*$/\r\n        });\r\n    });\r\n\r\n\r\n}\r\n;\r\n\r\n    /**\r\n     * инициализация карты\r\n     */\r\n    const map = document.getElementById('map');\r\n\r\nif (map) {\r\n\r\n    \r\n\r\n}\r\n;\r\n\r\n\r\n// Получаем ссылки с классами '.footer__policy-link' и '.footer__agreement-link'\r\n    const policyLinks = document.querySelectorAll('.footer__policy-link, .footer__agreement-link');\r\n\r\n// Функция обработчика клика\r\n    function handleClick(e) {\r\n        e.preventDefault(); // Отменяем стандартное поведение ссылки\r\n        let href = this.getAttribute('href'); // Получаем значение атрибута 'href' ссылки\r\n        window.location.href = href.replace('#', ''); // Удаляем символ '#' из значения 'href' и ереходим по новому адресу\r\n    }\r\n\r\n    if (policyLinks.length > 0) {\r\n// Назначаем обработчик клика на каждую найденную ссылку\r\n        policyLinks.forEach(link => {\r\n            link.addEventListener('click', handleClick);\r\n        });\r\n    }\r\n\r\n    const customSelects = document.querySelectorAll('select.select');\r\n\r\n    if (customSelects.length > 0) {\r\n        customSelects.forEach(select => {\r\n            new CustomSelect('init', {\r\n                selectElement: select\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Табы на главнйо странце в секции Geography\r\n     */\r\n\r\n    const geographyTabs = document.querySelectorAll('.geography__tabs .geography_tab');\r\n\r\n    if (geographyTabs) {\r\n        const geographyTabsContent = document.querySelectorAll('.geography__tabs-content .geography__tab-content');\r\n\r\n        geographyTabs.forEach(tab => {\r\n           tab.addEventListener('click', (e) => {\r\n              e.preventDefault();\r\n              const target = e.target;\r\n              const currentTab = target.classList === 'geography_tab' ? target : target.closest('.geography_tab');\r\n              const dataTab = currentTab.dataset.tab;\r\n\r\n              if (geographyTabsContent) {\r\n                  geographyTabsContent.forEach(contentTab => {\r\n                     const dataContentTab = contentTab.dataset.tab;\r\n                      contentTab.style.display = dataContentTab === dataTab ? 'block' : 'none';\r\n                  });\r\n              }\r\n\r\n               geographyTabs.forEach(tab => {\r\n                   tab.classList.remove('active');\r\n               });\r\n               currentTab.classList.add('active');\r\n            });\r\n        });\r\n    }\r\n\r\nconst mainAboutSlider = document.querySelector('.main-about__slider');\r\nconst projectsSlider = document.querySelector('.projects__slider');\r\n\r\nif (mainAboutSlider) {\r\n    if (mainAboutSlider.children.length > 1) {\r\n        baseSliderInit(mainAboutSlider);\r\n    }\r\n}\r\n\r\nif (projectsSlider) {\r\n    if (projectsSlider.children.length > 1) {\r\n        baseSliderInit(projectsSlider);\r\n    }\r\n}\r\n\r\nfunction baseSliderInit(slider) {\r\n    let sliderNavi = slider.parentElement.querySelector('.slider-nav'); // навигация слайдера\r\n\r\n    $(slider).slick({\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1,\r\n        speed: 700,\r\n        draggable: true,\r\n        appendDots: $(sliderNavi),\r\n        appendArrows: $(sliderNavi),\r\n        arrows: false,\r\n        infinite: false,\r\n        swipe: true,\r\n        dots: true,\r\n        dotsClass: 'slider-dots',\r\n    });\r\n}\r\n\r\n;\r\n});\r\n"]}